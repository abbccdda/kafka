apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-client-config
  labels:
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
data:
  client_properties.json: '
{
  "sasl.mechanism": "PLAIN",
  "sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{ .Values.apiKey }}\" password=\"{{ .Values.apiSecret }}\";",
  "security.protocol": "SASL_SSL",
  "linger.ms": {{ .Values.LingerMs }}
}
'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-topic-config
  labels:
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
data:
  enterprise-topics.json: '
{
  "long_lived_task_duration_ms": {{ .Values.longLivedTaskMs }},
  "short_lived_task_duration_ms": {{ .Values.shortLivedTaskMs }},
  "short_lived_task_reschedule_delay_ms": {{ .Values.shortLivedTaskRescheduleDelayMs }},
  "topics": [
    {
      "name": "baseline_soak_medium_topic_25p",
      "partitions_count": 25,
      "produce_mbs_throughput": 15,
      "consume_mbs_throughput": 30,
      "long_lived_producer_count": 2,
      "short_lived_producer_count": 2,
      "long_lived_consumer_count": 2,
      "short_lived_consumer_count": 2,
      {{/*
        sequentialOffsets batch verifier will cause consumers to seek
        to beginning of log on startup, spawn short-lived consumers
        in a random consumer group so they don't affect other consumers
       */ -}}
      "short_lived_random_consumer_group": true,
      "idempotence_enabled": true,
      "short_lived_consumer_record_batch_verifier": {
        "type": "sequentialOffsets"
      },
      "long_lived_consumer_record_batch_verifier": {
        "type": "sequentialOffsets"
      }
    },
    {
      "name": "baseline_soak_eos_topic_100p",
      "partitions_count": 100,
      "produce_mbs_throughput": 15,
      "consume_mbs_throughput": 30,
      "long_lived_producer_count": 2,
      "short_lived_producer_count": 2,
      "long_lived_consumer_count": 2,
      "short_lived_consumer_count": 2,
      "transactions_enabled": true
    }
  ]
}
'
  one-large-topic.json: '
{
  "long_lived_task_duration_ms": {{ .Values.longLivedTaskMs }},
  "short_lived_task_duration_ms": {{ .Values.shortLivedTaskMs }},
  "short_lived_task_reschedule_delay_ms": {{ .Values.shortLivedTaskRescheduleDelayMs }},
  "topics": [
    {
      "name": "tenant_soak_topic_900p",
      "partitions_count": 1600,
      "produce_mbs_throughput": 70,
      "consume_mbs_throughput": 60,
      "long_lived_producer_count": 6,
      "short_lived_producer_count": 6,
      "long_lived_consumer_count": 6,
      "short_lived_consumer_count": 6
    }
  ]
}
'
  skewed-load-topics.json: '
{
  "long_lived_task_duration_ms": {{ .Values.longLivedTaskMs }},
  "short_lived_task_duration_ms": {{ .Values.shortLivedTaskMs }},
  "short_lived_task_reschedule_delay_ms": {{ .Values.shortLivedTaskRescheduleDelayMs }},
  "topics": [
    {
      "name": "tenant_soak_topic_4p",
      "partitions_count": 4,
      "produce_mbs_throughput": 15,
      "consume_mbs_throughput": 30,
      "long_lived_producer_count": 2,
      "short_lived_producer_count": 2,
      "long_lived_consumer_count": 2,
      "short_lived_consumer_count": 2
    },
    {
      "name": "tenant_soak_low_bandwidth_topic_16p",
      "partitions_count": 16,
      "produce_mbs_throughput": 1,
      "consume_mbs_throughput": 2,
      "long_lived_producer_count": 1,
      "short_lived_producer_count": 1,
      "long_lived_consumer_count": 1,
      "short_lived_consumer_count": 1,
      "idempotence_enabled": true
    }
  ]
}
'
  unbalanced-topics.json: '
{
  "long_lived_task_duration_ms": {{ .Values.longLivedTaskMs }},
  "short_lived_task_duration_ms": {{ .Values.shortLivedTaskMs }},
  "short_lived_task_reschedule_delay_ms": {{ .Values.shortLivedTaskRescheduleDelayMs }},
  "topics": [
    {
      "name": "unbalanced_soak_topic_1_9p",
      "partitions_count": 9,
      "produce_mbs_throughput": 10,
      "consume_mbs_throughput": 10,
      "long_lived_producer_count": 2,
      "short_lived_producer_count": 2,
      "long_lived_consumer_count": 2,
      "short_lived_consumer_count": 2,
      "workload_type": "gaussian",
      "short_lived_consumer_record_batch_verifier": {
        "type": "sequentialOffsets"
      },
      "long_lived_consumer_record_batch_verifier": {
        "type": "sequentialOffsets"
      }
    },
    {
      "name": "unbalanced_soak_topic_2_9p",
      "partitions_count": 9,
      "produce_mbs_throughput": 10,
      "consume_mbs_throughput": 10,
      "long_lived_producer_count": 2,
      "short_lived_producer_count": 2,
      "long_lived_consumer_count": 2,
      "short_lived_consumer_count": 2,
      "workload_type": "gaussian",
      "short_lived_consumer_record_batch_verifier": {
        "type": "sequentialOffsets"
      },
      "long_lived_consumer_record_batch_verifier": {
        "type": "sequentialOffsets"
      }
    },
    {
      "name": "unbalanced_soak_topic_3_9p",
      "partitions_count": 9,
      "produce_mbs_throughput": 5,
      "consume_mbs_throughput": 5,
      "long_lived_producer_count": 2,
      "short_lived_producer_count": 2,
      "long_lived_consumer_count": 2,
      "short_lived_consumer_count": 2,
      "workload_type": "gaussian",
      "short_lived_consumer_record_batch_verifier": {
        "type": "sequentialOffsets"
      },
      "long_lived_consumer_record_batch_verifier": {
        "type": "sequentialOffsets"
      }
    },
    {
      "name": "unbalanced_soak_topic_4_9p",
      "partitions_count": 9,
      "produce_mbs_throughput": 5,
      "consume_mbs_throughput": 5,
      "long_lived_producer_count": 2,
      "short_lived_producer_count": 2,
      "long_lived_consumer_count": 2,
      "short_lived_consumer_count": 2,
      "workload_type": "gaussian",
      "short_lived_consumer_record_batch_verifier": {
        "type": "sequentialOffsets"
      },
      "long_lived_consumer_record_batch_verifier": {
        "type": "sequentialOffsets"
     }
    }
  ]
}
'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-performance-test-config
  labels:
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
data:
  performance_test.json: '
{
  "scenario_name": "ExampleTest",
  "test_definitions": [
    {
      "test_type": "ProgressiveWorkload",
      "test_name": "progressive-produce-test-10-200mbs",
      "test_parameters": {
        "workload_type": "Produce",
        "step_duration_ms": 150000,
        "partition_count": 100,
        "step_cooldown_ms": 30000,
        "start_throughput_mbs": 10,
        "end_throughput_mbs": 200,
        "throughput_increase_per_step_mbs": 10,
        "message_size_bytes": 1000
      }
    }
  ]
}
'
