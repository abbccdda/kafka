/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.support.metrics;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Represents enhanced support-relevant metrics captured on a single Kafka broker */
@org.apache.avro.specific.AvroGenerated
public class SupportKafkaMetricsEnhanced extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8370399047824773622L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SupportKafkaMetricsEnhanced\",\"namespace\":\"io.confluent.support.metrics\",\"doc\":\"Represents enhanced support-relevant metrics captured on a single Kafka broker\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Time when this data record was created on the broker (Unix time).\"},{\"name\":\"jvmStartTimeMs\",\"type\":\"long\",\"doc\":\"The start time of the Java virtual machine in milliseconds.\"},{\"name\":\"jvmUptimeMs\",\"type\":\"long\",\"doc\":\"The uptime of the Java virtual machine in milliseconds.\"},{\"name\":\"clusterId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"A unique identifier for the Kafka cluster.\",\"default\":\"NA\"},{\"name\":\"brokerId\",\"type\":\"int\",\"doc\":\"The ID of this broker aka `broker.id`.\"},{\"name\":\"kafkaVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The version of Kafka this broker is running.\"},{\"name\":\"confluentPlatformVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The version of the Confluent Platform this broker is running.\"},{\"name\":\"collectorState\",\"type\":\"int\",\"doc\":\"The run-time state of the Proactive Support agent that collects the metrics from this broker. Valid values are: 0 (stopped), 1 (shutting down), and 2 (running).\"},{\"name\":\"brokerProcessUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"A unique identifier that is valid for the runtime of a broker.  The identifier is generated at broker startup and lost at shutdown/crash.\"},{\"name\":\"brokerMetrics\",\"type\":{\"type\":\"record\",\"name\":\"BrokerMetricsRecord\",\"fields\":[{\"name\":\"brokerConfiguration\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"doc\":\"Kafka configuration of this broker.\",\"default\":null},{\"name\":\"javaSystemProperties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"doc\":\"Java system properties of this broker, obtained through System.getProperties().\",\"default\":null},{\"name\":\"jvmRuntimeEnvironment\",\"type\":{\"type\":\"record\",\"name\":\"RuntimePropertiesRecord\",\"fields\":[{\"name\":\"availableProcessors\",\"type\":\"int\"},{\"name\":\"freeMemoryBytes\",\"type\":\"long\"},{\"name\":\"maxMemoryBytes\",\"type\":\"long\"},{\"name\":\"totalMemoryBytes\",\"type\":\"long\"}]},\"doc\":\"Runtime environment information of this broker's JVM.\"},{\"name\":\"brokerStatistics\",\"type\":{\"type\":\"record\",\"name\":\"BrokerStatisticsRecord\",\"fields\":[{\"name\":\"writtenBytes\",\"type\":\"long\",\"doc\":\"Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted\"},{\"name\":\"readBytes\",\"type\":\"long\",\"doc\":\"Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation\"},{\"name\":\"bytesInRate\",\"type\":\"double\",\"doc\":\"Average (mean) bytes per second written to this broker since it started. Counter is reset on restart.\"},{\"name\":\"bytesOutRate\",\"type\":\"double\",\"doc\":\"Average (mean) bytes per second read from this broker since it started. Counter is reset on restart.\"},{\"name\":\"numPartitions\",\"type\":\"int\",\"doc\":\"Total number of partitions stored in this broker.\"}]},\"doc\":\"Various statistics obtained from a running broker\"}]},\"doc\":\"Metrics collected from a single broker.\"},{\"name\":\"clusterMetrics\",\"type\":{\"type\":\"record\",\"name\":\"ClusterMetricsRecord\",\"fields\":[{\"name\":\"replicationHistogram\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"Distribution of partitions by replication factor. Buckets represent replication factors 0-4 and >=5.\"},{\"name\":\"minIsrHistogram\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"Distribution of partitions by minIsr factor. Buckets represent minIsr factors 0-4 and >=5.\"},{\"name\":\"numberTopics\",\"type\":\"long\",\"doc\":\"Total number of topics in the cluster from a broker's metadata cache.\"},{\"name\":\"numberTopicsZk\",\"type\":\"long\",\"doc\":\"Total number of topics in the cluster obtained from Zookeeper.\"},{\"name\":\"numberPartitions\",\"type\":\"long\",\"doc\":\"Total number of partitions in the cluster from a broker's metadata cache.\"},{\"name\":\"zookeeperStats\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}}],\"doc\":\"Array of Zookeeper servers' statistics (currently only version number). Length of array is number of Zookeeper servers.\",\"default\":null},{\"name\":\"uncleanLeaderElectionHistogram\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"Distribution of partitions by uncleanLeaderElection option. 2 buckets representing FALSE and TRUE.\"}]},\"doc\":\"Metrics representing cluster statistics\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Time when this data record was created on the broker (Unix time). */
  @Deprecated public long timestamp;
  /** The start time of the Java virtual machine in milliseconds. */
  @Deprecated public long jvmStartTimeMs;
  /** The uptime of the Java virtual machine in milliseconds. */
  @Deprecated public long jvmUptimeMs;
  /** A unique identifier for the Kafka cluster. */
  @Deprecated public java.lang.String clusterId;
  /** The ID of this broker aka `broker.id`. */
  @Deprecated public int brokerId;
  /** The version of Kafka this broker is running. */
  @Deprecated public java.lang.String kafkaVersion;
  /** The version of the Confluent Platform this broker is running. */
  @Deprecated public java.lang.String confluentPlatformVersion;
  /** The run-time state of the Proactive Support agent that collects the metrics from this broker. Valid values are: 0 (stopped), 1 (shutting down), and 2 (running). */
  @Deprecated public int collectorState;
  /** A unique identifier that is valid for the runtime of a broker.  The identifier is generated at broker startup and lost at shutdown/crash. */
  @Deprecated public java.lang.String brokerProcessUUID;
  /** Metrics collected from a single broker. */
  @Deprecated public io.confluent.support.metrics.BrokerMetricsRecord brokerMetrics;
  /** Metrics representing cluster statistics */
  @Deprecated public io.confluent.support.metrics.ClusterMetricsRecord clusterMetrics;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SupportKafkaMetricsEnhanced() {}

  /**
   * All-args constructor.
   * @param timestamp Time when this data record was created on the broker (Unix time).
   * @param jvmStartTimeMs The start time of the Java virtual machine in milliseconds.
   * @param jvmUptimeMs The uptime of the Java virtual machine in milliseconds.
   * @param clusterId A unique identifier for the Kafka cluster.
   * @param brokerId The ID of this broker aka `broker.id`.
   * @param kafkaVersion The version of Kafka this broker is running.
   * @param confluentPlatformVersion The version of the Confluent Platform this broker is running.
   * @param collectorState The run-time state of the Proactive Support agent that collects the metrics from this broker. Valid values are: 0 (stopped), 1 (shutting down), and 2 (running).
   * @param brokerProcessUUID A unique identifier that is valid for the runtime of a broker.  The identifier is generated at broker startup and lost at shutdown/crash.
   * @param brokerMetrics Metrics collected from a single broker.
   * @param clusterMetrics Metrics representing cluster statistics
   */
  public SupportKafkaMetricsEnhanced(java.lang.Long timestamp, java.lang.Long jvmStartTimeMs, java.lang.Long jvmUptimeMs, java.lang.String clusterId, java.lang.Integer brokerId, java.lang.String kafkaVersion, java.lang.String confluentPlatformVersion, java.lang.Integer collectorState, java.lang.String brokerProcessUUID, io.confluent.support.metrics.BrokerMetricsRecord brokerMetrics, io.confluent.support.metrics.ClusterMetricsRecord clusterMetrics) {
    this.timestamp = timestamp;
    this.jvmStartTimeMs = jvmStartTimeMs;
    this.jvmUptimeMs = jvmUptimeMs;
    this.clusterId = clusterId;
    this.brokerId = brokerId;
    this.kafkaVersion = kafkaVersion;
    this.confluentPlatformVersion = confluentPlatformVersion;
    this.collectorState = collectorState;
    this.brokerProcessUUID = brokerProcessUUID;
    this.brokerMetrics = brokerMetrics;
    this.clusterMetrics = clusterMetrics;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return jvmStartTimeMs;
    case 2: return jvmUptimeMs;
    case 3: return clusterId;
    case 4: return brokerId;
    case 5: return kafkaVersion;
    case 6: return confluentPlatformVersion;
    case 7: return collectorState;
    case 8: return brokerProcessUUID;
    case 9: return brokerMetrics;
    case 10: return clusterMetrics;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: jvmStartTimeMs = (java.lang.Long)value$; break;
    case 2: jvmUptimeMs = (java.lang.Long)value$; break;
    case 3: clusterId = (java.lang.String)value$; break;
    case 4: brokerId = (java.lang.Integer)value$; break;
    case 5: kafkaVersion = (java.lang.String)value$; break;
    case 6: confluentPlatformVersion = (java.lang.String)value$; break;
    case 7: collectorState = (java.lang.Integer)value$; break;
    case 8: brokerProcessUUID = (java.lang.String)value$; break;
    case 9: brokerMetrics = (io.confluent.support.metrics.BrokerMetricsRecord)value$; break;
    case 10: clusterMetrics = (io.confluent.support.metrics.ClusterMetricsRecord)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Time when this data record was created on the broker (Unix time).
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * Time when this data record was created on the broker (Unix time).
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'jvmStartTimeMs' field.
   * @return The start time of the Java virtual machine in milliseconds.
   */
  public java.lang.Long getJvmStartTimeMs() {
    return jvmStartTimeMs;
  }

  /**
   * Sets the value of the 'jvmStartTimeMs' field.
   * The start time of the Java virtual machine in milliseconds.
   * @param value the value to set.
   */
  public void setJvmStartTimeMs(java.lang.Long value) {
    this.jvmStartTimeMs = value;
  }

  /**
   * Gets the value of the 'jvmUptimeMs' field.
   * @return The uptime of the Java virtual machine in milliseconds.
   */
  public java.lang.Long getJvmUptimeMs() {
    return jvmUptimeMs;
  }

  /**
   * Sets the value of the 'jvmUptimeMs' field.
   * The uptime of the Java virtual machine in milliseconds.
   * @param value the value to set.
   */
  public void setJvmUptimeMs(java.lang.Long value) {
    this.jvmUptimeMs = value;
  }

  /**
   * Gets the value of the 'clusterId' field.
   * @return A unique identifier for the Kafka cluster.
   */
  public java.lang.String getClusterId() {
    return clusterId;
  }

  /**
   * Sets the value of the 'clusterId' field.
   * A unique identifier for the Kafka cluster.
   * @param value the value to set.
   */
  public void setClusterId(java.lang.String value) {
    this.clusterId = value;
  }

  /**
   * Gets the value of the 'brokerId' field.
   * @return The ID of this broker aka `broker.id`.
   */
  public java.lang.Integer getBrokerId() {
    return brokerId;
  }

  /**
   * Sets the value of the 'brokerId' field.
   * The ID of this broker aka `broker.id`.
   * @param value the value to set.
   */
  public void setBrokerId(java.lang.Integer value) {
    this.brokerId = value;
  }

  /**
   * Gets the value of the 'kafkaVersion' field.
   * @return The version of Kafka this broker is running.
   */
  public java.lang.String getKafkaVersion() {
    return kafkaVersion;
  }

  /**
   * Sets the value of the 'kafkaVersion' field.
   * The version of Kafka this broker is running.
   * @param value the value to set.
   */
  public void setKafkaVersion(java.lang.String value) {
    this.kafkaVersion = value;
  }

  /**
   * Gets the value of the 'confluentPlatformVersion' field.
   * @return The version of the Confluent Platform this broker is running.
   */
  public java.lang.String getConfluentPlatformVersion() {
    return confluentPlatformVersion;
  }

  /**
   * Sets the value of the 'confluentPlatformVersion' field.
   * The version of the Confluent Platform this broker is running.
   * @param value the value to set.
   */
  public void setConfluentPlatformVersion(java.lang.String value) {
    this.confluentPlatformVersion = value;
  }

  /**
   * Gets the value of the 'collectorState' field.
   * @return The run-time state of the Proactive Support agent that collects the metrics from this broker. Valid values are: 0 (stopped), 1 (shutting down), and 2 (running).
   */
  public java.lang.Integer getCollectorState() {
    return collectorState;
  }

  /**
   * Sets the value of the 'collectorState' field.
   * The run-time state of the Proactive Support agent that collects the metrics from this broker. Valid values are: 0 (stopped), 1 (shutting down), and 2 (running).
   * @param value the value to set.
   */
  public void setCollectorState(java.lang.Integer value) {
    this.collectorState = value;
  }

  /**
   * Gets the value of the 'brokerProcessUUID' field.
   * @return A unique identifier that is valid for the runtime of a broker.  The identifier is generated at broker startup and lost at shutdown/crash.
   */
  public java.lang.String getBrokerProcessUUID() {
    return brokerProcessUUID;
  }

  /**
   * Sets the value of the 'brokerProcessUUID' field.
   * A unique identifier that is valid for the runtime of a broker.  The identifier is generated at broker startup and lost at shutdown/crash.
   * @param value the value to set.
   */
  public void setBrokerProcessUUID(java.lang.String value) {
    this.brokerProcessUUID = value;
  }

  /**
   * Gets the value of the 'brokerMetrics' field.
   * @return Metrics collected from a single broker.
   */
  public io.confluent.support.metrics.BrokerMetricsRecord getBrokerMetrics() {
    return brokerMetrics;
  }

  /**
   * Sets the value of the 'brokerMetrics' field.
   * Metrics collected from a single broker.
   * @param value the value to set.
   */
  public void setBrokerMetrics(io.confluent.support.metrics.BrokerMetricsRecord value) {
    this.brokerMetrics = value;
  }

  /**
   * Gets the value of the 'clusterMetrics' field.
   * @return Metrics representing cluster statistics
   */
  public io.confluent.support.metrics.ClusterMetricsRecord getClusterMetrics() {
    return clusterMetrics;
  }

  /**
   * Sets the value of the 'clusterMetrics' field.
   * Metrics representing cluster statistics
   * @param value the value to set.
   */
  public void setClusterMetrics(io.confluent.support.metrics.ClusterMetricsRecord value) {
    this.clusterMetrics = value;
  }

  /**
   * Creates a new SupportKafkaMetricsEnhanced RecordBuilder.
   * @return A new SupportKafkaMetricsEnhanced RecordBuilder
   */
  public static io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder newBuilder() {
    return new io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder();
  }

  /**
   * Creates a new SupportKafkaMetricsEnhanced RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SupportKafkaMetricsEnhanced RecordBuilder
   */
  public static io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder newBuilder(io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder other) {
    return new io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder(other);
  }

  /**
   * Creates a new SupportKafkaMetricsEnhanced RecordBuilder by copying an existing SupportKafkaMetricsEnhanced instance.
   * @param other The existing instance to copy.
   * @return A new SupportKafkaMetricsEnhanced RecordBuilder
   */
  public static io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder newBuilder(io.confluent.support.metrics.SupportKafkaMetricsEnhanced other) {
    return new io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder(other);
  }

  /**
   * RecordBuilder for SupportKafkaMetricsEnhanced instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SupportKafkaMetricsEnhanced>
    implements org.apache.avro.data.RecordBuilder<SupportKafkaMetricsEnhanced> {

    /** Time when this data record was created on the broker (Unix time). */
    private long timestamp;
    /** The start time of the Java virtual machine in milliseconds. */
    private long jvmStartTimeMs;
    /** The uptime of the Java virtual machine in milliseconds. */
    private long jvmUptimeMs;
    /** A unique identifier for the Kafka cluster. */
    private java.lang.String clusterId;
    /** The ID of this broker aka `broker.id`. */
    private int brokerId;
    /** The version of Kafka this broker is running. */
    private java.lang.String kafkaVersion;
    /** The version of the Confluent Platform this broker is running. */
    private java.lang.String confluentPlatformVersion;
    /** The run-time state of the Proactive Support agent that collects the metrics from this broker. Valid values are: 0 (stopped), 1 (shutting down), and 2 (running). */
    private int collectorState;
    /** A unique identifier that is valid for the runtime of a broker.  The identifier is generated at broker startup and lost at shutdown/crash. */
    private java.lang.String brokerProcessUUID;
    /** Metrics collected from a single broker. */
    private io.confluent.support.metrics.BrokerMetricsRecord brokerMetrics;
    private io.confluent.support.metrics.BrokerMetricsRecord.Builder brokerMetricsBuilder;
    /** Metrics representing cluster statistics */
    private io.confluent.support.metrics.ClusterMetricsRecord clusterMetrics;
    private io.confluent.support.metrics.ClusterMetricsRecord.Builder clusterMetricsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jvmStartTimeMs)) {
        this.jvmStartTimeMs = data().deepCopy(fields()[1].schema(), other.jvmStartTimeMs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.jvmUptimeMs)) {
        this.jvmUptimeMs = data().deepCopy(fields()[2].schema(), other.jvmUptimeMs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.clusterId)) {
        this.clusterId = data().deepCopy(fields()[3].schema(), other.clusterId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[4].schema(), other.brokerId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.kafkaVersion)) {
        this.kafkaVersion = data().deepCopy(fields()[5].schema(), other.kafkaVersion);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.confluentPlatformVersion)) {
        this.confluentPlatformVersion = data().deepCopy(fields()[6].schema(), other.confluentPlatformVersion);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.collectorState)) {
        this.collectorState = data().deepCopy(fields()[7].schema(), other.collectorState);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.brokerProcessUUID)) {
        this.brokerProcessUUID = data().deepCopy(fields()[8].schema(), other.brokerProcessUUID);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.brokerMetrics)) {
        this.brokerMetrics = data().deepCopy(fields()[9].schema(), other.brokerMetrics);
        fieldSetFlags()[9] = true;
      }
      if (other.hasBrokerMetricsBuilder()) {
        this.brokerMetricsBuilder = io.confluent.support.metrics.BrokerMetricsRecord.newBuilder(other.getBrokerMetricsBuilder());
      }
      if (isValidValue(fields()[10], other.clusterMetrics)) {
        this.clusterMetrics = data().deepCopy(fields()[10].schema(), other.clusterMetrics);
        fieldSetFlags()[10] = true;
      }
      if (other.hasClusterMetricsBuilder()) {
        this.clusterMetricsBuilder = io.confluent.support.metrics.ClusterMetricsRecord.newBuilder(other.getClusterMetricsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing SupportKafkaMetricsEnhanced instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.support.metrics.SupportKafkaMetricsEnhanced other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jvmStartTimeMs)) {
        this.jvmStartTimeMs = data().deepCopy(fields()[1].schema(), other.jvmStartTimeMs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.jvmUptimeMs)) {
        this.jvmUptimeMs = data().deepCopy(fields()[2].schema(), other.jvmUptimeMs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.clusterId)) {
        this.clusterId = data().deepCopy(fields()[3].schema(), other.clusterId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[4].schema(), other.brokerId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.kafkaVersion)) {
        this.kafkaVersion = data().deepCopy(fields()[5].schema(), other.kafkaVersion);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.confluentPlatformVersion)) {
        this.confluentPlatformVersion = data().deepCopy(fields()[6].schema(), other.confluentPlatformVersion);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.collectorState)) {
        this.collectorState = data().deepCopy(fields()[7].schema(), other.collectorState);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.brokerProcessUUID)) {
        this.brokerProcessUUID = data().deepCopy(fields()[8].schema(), other.brokerProcessUUID);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.brokerMetrics)) {
        this.brokerMetrics = data().deepCopy(fields()[9].schema(), other.brokerMetrics);
        fieldSetFlags()[9] = true;
      }
      this.brokerMetricsBuilder = null;
      if (isValidValue(fields()[10], other.clusterMetrics)) {
        this.clusterMetrics = data().deepCopy(fields()[10].schema(), other.clusterMetrics);
        fieldSetFlags()[10] = true;
      }
      this.clusterMetricsBuilder = null;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Time when this data record was created on the broker (Unix time).
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * Time when this data record was created on the broker (Unix time).
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Time when this data record was created on the broker (Unix time).
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Time when this data record was created on the broker (Unix time).
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'jvmStartTimeMs' field.
      * The start time of the Java virtual machine in milliseconds.
      * @return The value.
      */
    public java.lang.Long getJvmStartTimeMs() {
      return jvmStartTimeMs;
    }

    /**
      * Sets the value of the 'jvmStartTimeMs' field.
      * The start time of the Java virtual machine in milliseconds.
      * @param value The value of 'jvmStartTimeMs'.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setJvmStartTimeMs(long value) {
      validate(fields()[1], value);
      this.jvmStartTimeMs = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'jvmStartTimeMs' field has been set.
      * The start time of the Java virtual machine in milliseconds.
      * @return True if the 'jvmStartTimeMs' field has been set, false otherwise.
      */
    public boolean hasJvmStartTimeMs() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'jvmStartTimeMs' field.
      * The start time of the Java virtual machine in milliseconds.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder clearJvmStartTimeMs() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'jvmUptimeMs' field.
      * The uptime of the Java virtual machine in milliseconds.
      * @return The value.
      */
    public java.lang.Long getJvmUptimeMs() {
      return jvmUptimeMs;
    }

    /**
      * Sets the value of the 'jvmUptimeMs' field.
      * The uptime of the Java virtual machine in milliseconds.
      * @param value The value of 'jvmUptimeMs'.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setJvmUptimeMs(long value) {
      validate(fields()[2], value);
      this.jvmUptimeMs = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'jvmUptimeMs' field has been set.
      * The uptime of the Java virtual machine in milliseconds.
      * @return True if the 'jvmUptimeMs' field has been set, false otherwise.
      */
    public boolean hasJvmUptimeMs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'jvmUptimeMs' field.
      * The uptime of the Java virtual machine in milliseconds.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder clearJvmUptimeMs() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'clusterId' field.
      * A unique identifier for the Kafka cluster.
      * @return The value.
      */
    public java.lang.String getClusterId() {
      return clusterId;
    }

    /**
      * Sets the value of the 'clusterId' field.
      * A unique identifier for the Kafka cluster.
      * @param value The value of 'clusterId'.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setClusterId(java.lang.String value) {
      validate(fields()[3], value);
      this.clusterId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'clusterId' field has been set.
      * A unique identifier for the Kafka cluster.
      * @return True if the 'clusterId' field has been set, false otherwise.
      */
    public boolean hasClusterId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'clusterId' field.
      * A unique identifier for the Kafka cluster.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder clearClusterId() {
      clusterId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'brokerId' field.
      * The ID of this broker aka `broker.id`.
      * @return The value.
      */
    public java.lang.Integer getBrokerId() {
      return brokerId;
    }

    /**
      * Sets the value of the 'brokerId' field.
      * The ID of this broker aka `broker.id`.
      * @param value The value of 'brokerId'.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setBrokerId(int value) {
      validate(fields()[4], value);
      this.brokerId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerId' field has been set.
      * The ID of this broker aka `broker.id`.
      * @return True if the 'brokerId' field has been set, false otherwise.
      */
    public boolean hasBrokerId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'brokerId' field.
      * The ID of this broker aka `broker.id`.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder clearBrokerId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'kafkaVersion' field.
      * The version of Kafka this broker is running.
      * @return The value.
      */
    public java.lang.String getKafkaVersion() {
      return kafkaVersion;
    }

    /**
      * Sets the value of the 'kafkaVersion' field.
      * The version of Kafka this broker is running.
      * @param value The value of 'kafkaVersion'.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setKafkaVersion(java.lang.String value) {
      validate(fields()[5], value);
      this.kafkaVersion = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'kafkaVersion' field has been set.
      * The version of Kafka this broker is running.
      * @return True if the 'kafkaVersion' field has been set, false otherwise.
      */
    public boolean hasKafkaVersion() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'kafkaVersion' field.
      * The version of Kafka this broker is running.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder clearKafkaVersion() {
      kafkaVersion = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'confluentPlatformVersion' field.
      * The version of the Confluent Platform this broker is running.
      * @return The value.
      */
    public java.lang.String getConfluentPlatformVersion() {
      return confluentPlatformVersion;
    }

    /**
      * Sets the value of the 'confluentPlatformVersion' field.
      * The version of the Confluent Platform this broker is running.
      * @param value The value of 'confluentPlatformVersion'.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setConfluentPlatformVersion(java.lang.String value) {
      validate(fields()[6], value);
      this.confluentPlatformVersion = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'confluentPlatformVersion' field has been set.
      * The version of the Confluent Platform this broker is running.
      * @return True if the 'confluentPlatformVersion' field has been set, false otherwise.
      */
    public boolean hasConfluentPlatformVersion() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'confluentPlatformVersion' field.
      * The version of the Confluent Platform this broker is running.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder clearConfluentPlatformVersion() {
      confluentPlatformVersion = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'collectorState' field.
      * The run-time state of the Proactive Support agent that collects the metrics from this broker. Valid values are: 0 (stopped), 1 (shutting down), and 2 (running).
      * @return The value.
      */
    public java.lang.Integer getCollectorState() {
      return collectorState;
    }

    /**
      * Sets the value of the 'collectorState' field.
      * The run-time state of the Proactive Support agent that collects the metrics from this broker. Valid values are: 0 (stopped), 1 (shutting down), and 2 (running).
      * @param value The value of 'collectorState'.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setCollectorState(int value) {
      validate(fields()[7], value);
      this.collectorState = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'collectorState' field has been set.
      * The run-time state of the Proactive Support agent that collects the metrics from this broker. Valid values are: 0 (stopped), 1 (shutting down), and 2 (running).
      * @return True if the 'collectorState' field has been set, false otherwise.
      */
    public boolean hasCollectorState() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'collectorState' field.
      * The run-time state of the Proactive Support agent that collects the metrics from this broker. Valid values are: 0 (stopped), 1 (shutting down), and 2 (running).
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder clearCollectorState() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'brokerProcessUUID' field.
      * A unique identifier that is valid for the runtime of a broker.  The identifier is generated at broker startup and lost at shutdown/crash.
      * @return The value.
      */
    public java.lang.String getBrokerProcessUUID() {
      return brokerProcessUUID;
    }

    /**
      * Sets the value of the 'brokerProcessUUID' field.
      * A unique identifier that is valid for the runtime of a broker.  The identifier is generated at broker startup and lost at shutdown/crash.
      * @param value The value of 'brokerProcessUUID'.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setBrokerProcessUUID(java.lang.String value) {
      validate(fields()[8], value);
      this.brokerProcessUUID = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerProcessUUID' field has been set.
      * A unique identifier that is valid for the runtime of a broker.  The identifier is generated at broker startup and lost at shutdown/crash.
      * @return True if the 'brokerProcessUUID' field has been set, false otherwise.
      */
    public boolean hasBrokerProcessUUID() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'brokerProcessUUID' field.
      * A unique identifier that is valid for the runtime of a broker.  The identifier is generated at broker startup and lost at shutdown/crash.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder clearBrokerProcessUUID() {
      brokerProcessUUID = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'brokerMetrics' field.
      * Metrics collected from a single broker.
      * @return The value.
      */
    public io.confluent.support.metrics.BrokerMetricsRecord getBrokerMetrics() {
      return brokerMetrics;
    }

    /**
      * Sets the value of the 'brokerMetrics' field.
      * Metrics collected from a single broker.
      * @param value The value of 'brokerMetrics'.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setBrokerMetrics(io.confluent.support.metrics.BrokerMetricsRecord value) {
      validate(fields()[9], value);
      this.brokerMetricsBuilder = null;
      this.brokerMetrics = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerMetrics' field has been set.
      * Metrics collected from a single broker.
      * @return True if the 'brokerMetrics' field has been set, false otherwise.
      */
    public boolean hasBrokerMetrics() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'brokerMetrics' field and creates one if it doesn't exist yet.
     * Metrics collected from a single broker.
     * @return This builder.
     */
    public io.confluent.support.metrics.BrokerMetricsRecord.Builder getBrokerMetricsBuilder() {
      if (brokerMetricsBuilder == null) {
        if (hasBrokerMetrics()) {
          setBrokerMetricsBuilder(io.confluent.support.metrics.BrokerMetricsRecord.newBuilder(brokerMetrics));
        } else {
          setBrokerMetricsBuilder(io.confluent.support.metrics.BrokerMetricsRecord.newBuilder());
        }
      }
      return brokerMetricsBuilder;
    }

    /**
     * Sets the Builder instance for the 'brokerMetrics' field
     * Metrics collected from a single broker.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setBrokerMetricsBuilder(io.confluent.support.metrics.BrokerMetricsRecord.Builder value) {
      clearBrokerMetrics();
      brokerMetricsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'brokerMetrics' field has an active Builder instance
     * Metrics collected from a single broker.
     * @return True if the 'brokerMetrics' field has an active Builder instance
     */
    public boolean hasBrokerMetricsBuilder() {
      return brokerMetricsBuilder != null;
    }

    /**
      * Clears the value of the 'brokerMetrics' field.
      * Metrics collected from a single broker.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder clearBrokerMetrics() {
      brokerMetrics = null;
      brokerMetricsBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'clusterMetrics' field.
      * Metrics representing cluster statistics
      * @return The value.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord getClusterMetrics() {
      return clusterMetrics;
    }

    /**
      * Sets the value of the 'clusterMetrics' field.
      * Metrics representing cluster statistics
      * @param value The value of 'clusterMetrics'.
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setClusterMetrics(io.confluent.support.metrics.ClusterMetricsRecord value) {
      validate(fields()[10], value);
      this.clusterMetricsBuilder = null;
      this.clusterMetrics = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'clusterMetrics' field has been set.
      * Metrics representing cluster statistics
      * @return True if the 'clusterMetrics' field has been set, false otherwise.
      */
    public boolean hasClusterMetrics() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'clusterMetrics' field and creates one if it doesn't exist yet.
     * Metrics representing cluster statistics
     * @return This builder.
     */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder getClusterMetricsBuilder() {
      if (clusterMetricsBuilder == null) {
        if (hasClusterMetrics()) {
          setClusterMetricsBuilder(io.confluent.support.metrics.ClusterMetricsRecord.newBuilder(clusterMetrics));
        } else {
          setClusterMetricsBuilder(io.confluent.support.metrics.ClusterMetricsRecord.newBuilder());
        }
      }
      return clusterMetricsBuilder;
    }

    /**
     * Sets the Builder instance for the 'clusterMetrics' field
     * Metrics representing cluster statistics
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder setClusterMetricsBuilder(io.confluent.support.metrics.ClusterMetricsRecord.Builder value) {
      clearClusterMetrics();
      clusterMetricsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'clusterMetrics' field has an active Builder instance
     * Metrics representing cluster statistics
     * @return True if the 'clusterMetrics' field has an active Builder instance
     */
    public boolean hasClusterMetricsBuilder() {
      return clusterMetricsBuilder != null;
    }

    /**
      * Clears the value of the 'clusterMetrics' field.
      * Metrics representing cluster statistics
      * @return This builder.
      */
    public io.confluent.support.metrics.SupportKafkaMetricsEnhanced.Builder clearClusterMetrics() {
      clusterMetrics = null;
      clusterMetricsBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public SupportKafkaMetricsEnhanced build() {
      try {
        SupportKafkaMetricsEnhanced record = new SupportKafkaMetricsEnhanced();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.jvmStartTimeMs = fieldSetFlags()[1] ? this.jvmStartTimeMs : (java.lang.Long) defaultValue(fields()[1]);
        record.jvmUptimeMs = fieldSetFlags()[2] ? this.jvmUptimeMs : (java.lang.Long) defaultValue(fields()[2]);
        record.clusterId = fieldSetFlags()[3] ? this.clusterId : (java.lang.String) defaultValue(fields()[3]);
        record.brokerId = fieldSetFlags()[4] ? this.brokerId : (java.lang.Integer) defaultValue(fields()[4]);
        record.kafkaVersion = fieldSetFlags()[5] ? this.kafkaVersion : (java.lang.String) defaultValue(fields()[5]);
        record.confluentPlatformVersion = fieldSetFlags()[6] ? this.confluentPlatformVersion : (java.lang.String) defaultValue(fields()[6]);
        record.collectorState = fieldSetFlags()[7] ? this.collectorState : (java.lang.Integer) defaultValue(fields()[7]);
        record.brokerProcessUUID = fieldSetFlags()[8] ? this.brokerProcessUUID : (java.lang.String) defaultValue(fields()[8]);
        if (brokerMetricsBuilder != null) {
          record.brokerMetrics = this.brokerMetricsBuilder.build();
        } else {
          record.brokerMetrics = fieldSetFlags()[9] ? this.brokerMetrics : (io.confluent.support.metrics.BrokerMetricsRecord) defaultValue(fields()[9]);
        }
        if (clusterMetricsBuilder != null) {
          record.clusterMetrics = this.clusterMetricsBuilder.build();
        } else {
          record.clusterMetrics = fieldSetFlags()[10] ? this.clusterMetrics : (io.confluent.support.metrics.ClusterMetricsRecord) defaultValue(fields()[10]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
