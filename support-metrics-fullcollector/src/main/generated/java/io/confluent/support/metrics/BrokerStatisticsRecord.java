/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.support.metrics;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BrokerStatisticsRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2249512333138737857L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BrokerStatisticsRecord\",\"namespace\":\"io.confluent.support.metrics\",\"fields\":[{\"name\":\"writtenBytes\",\"type\":\"long\",\"doc\":\"Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted\"},{\"name\":\"readBytes\",\"type\":\"long\",\"doc\":\"Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation\"},{\"name\":\"bytesInRate\",\"type\":\"double\",\"doc\":\"Average (mean) bytes per second written to this broker since it started. Counter is reset on restart.\"},{\"name\":\"bytesOutRate\",\"type\":\"double\",\"doc\":\"Average (mean) bytes per second read from this broker since it started. Counter is reset on restart.\"},{\"name\":\"numPartitions\",\"type\":\"int\",\"doc\":\"Total number of partitions stored in this broker.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted */
  @Deprecated public long writtenBytes;
  /** Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation */
  @Deprecated public long readBytes;
  /** Average (mean) bytes per second written to this broker since it started. Counter is reset on restart. */
  @Deprecated public double bytesInRate;
  /** Average (mean) bytes per second read from this broker since it started. Counter is reset on restart. */
  @Deprecated public double bytesOutRate;
  /** Total number of partitions stored in this broker. */
  @Deprecated public int numPartitions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BrokerStatisticsRecord() {}

  /**
   * All-args constructor.
   * @param writtenBytes Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted
   * @param readBytes Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation
   * @param bytesInRate Average (mean) bytes per second written to this broker since it started. Counter is reset on restart.
   * @param bytesOutRate Average (mean) bytes per second read from this broker since it started. Counter is reset on restart.
   * @param numPartitions Total number of partitions stored in this broker.
   */
  public BrokerStatisticsRecord(java.lang.Long writtenBytes, java.lang.Long readBytes, java.lang.Double bytesInRate, java.lang.Double bytesOutRate, java.lang.Integer numPartitions) {
    this.writtenBytes = writtenBytes;
    this.readBytes = readBytes;
    this.bytesInRate = bytesInRate;
    this.bytesOutRate = bytesOutRate;
    this.numPartitions = numPartitions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return writtenBytes;
    case 1: return readBytes;
    case 2: return bytesInRate;
    case 3: return bytesOutRate;
    case 4: return numPartitions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: writtenBytes = (java.lang.Long)value$; break;
    case 1: readBytes = (java.lang.Long)value$; break;
    case 2: bytesInRate = (java.lang.Double)value$; break;
    case 3: bytesOutRate = (java.lang.Double)value$; break;
    case 4: numPartitions = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'writtenBytes' field.
   * @return Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted
   */
  public java.lang.Long getWrittenBytes() {
    return writtenBytes;
  }

  /**
   * Sets the value of the 'writtenBytes' field.
   * Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted
   * @param value the value to set.
   */
  public void setWrittenBytes(java.lang.Long value) {
    this.writtenBytes = value;
  }

  /**
   * Gets the value of the 'readBytes' field.
   * @return Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation
   */
  public java.lang.Long getReadBytes() {
    return readBytes;
  }

  /**
   * Sets the value of the 'readBytes' field.
   * Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation
   * @param value the value to set.
   */
  public void setReadBytes(java.lang.Long value) {
    this.readBytes = value;
  }

  /**
   * Gets the value of the 'bytesInRate' field.
   * @return Average (mean) bytes per second written to this broker since it started. Counter is reset on restart.
   */
  public java.lang.Double getBytesInRate() {
    return bytesInRate;
  }

  /**
   * Sets the value of the 'bytesInRate' field.
   * Average (mean) bytes per second written to this broker since it started. Counter is reset on restart.
   * @param value the value to set.
   */
  public void setBytesInRate(java.lang.Double value) {
    this.bytesInRate = value;
  }

  /**
   * Gets the value of the 'bytesOutRate' field.
   * @return Average (mean) bytes per second read from this broker since it started. Counter is reset on restart.
   */
  public java.lang.Double getBytesOutRate() {
    return bytesOutRate;
  }

  /**
   * Sets the value of the 'bytesOutRate' field.
   * Average (mean) bytes per second read from this broker since it started. Counter is reset on restart.
   * @param value the value to set.
   */
  public void setBytesOutRate(java.lang.Double value) {
    this.bytesOutRate = value;
  }

  /**
   * Gets the value of the 'numPartitions' field.
   * @return Total number of partitions stored in this broker.
   */
  public java.lang.Integer getNumPartitions() {
    return numPartitions;
  }

  /**
   * Sets the value of the 'numPartitions' field.
   * Total number of partitions stored in this broker.
   * @param value the value to set.
   */
  public void setNumPartitions(java.lang.Integer value) {
    this.numPartitions = value;
  }

  /**
   * Creates a new BrokerStatisticsRecord RecordBuilder.
   * @return A new BrokerStatisticsRecord RecordBuilder
   */
  public static io.confluent.support.metrics.BrokerStatisticsRecord.Builder newBuilder() {
    return new io.confluent.support.metrics.BrokerStatisticsRecord.Builder();
  }

  /**
   * Creates a new BrokerStatisticsRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BrokerStatisticsRecord RecordBuilder
   */
  public static io.confluent.support.metrics.BrokerStatisticsRecord.Builder newBuilder(io.confluent.support.metrics.BrokerStatisticsRecord.Builder other) {
    return new io.confluent.support.metrics.BrokerStatisticsRecord.Builder(other);
  }

  /**
   * Creates a new BrokerStatisticsRecord RecordBuilder by copying an existing BrokerStatisticsRecord instance.
   * @param other The existing instance to copy.
   * @return A new BrokerStatisticsRecord RecordBuilder
   */
  public static io.confluent.support.metrics.BrokerStatisticsRecord.Builder newBuilder(io.confluent.support.metrics.BrokerStatisticsRecord other) {
    return new io.confluent.support.metrics.BrokerStatisticsRecord.Builder(other);
  }

  /**
   * RecordBuilder for BrokerStatisticsRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BrokerStatisticsRecord>
    implements org.apache.avro.data.RecordBuilder<BrokerStatisticsRecord> {

    /** Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted */
    private long writtenBytes;
    /** Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation */
    private long readBytes;
    /** Average (mean) bytes per second written to this broker since it started. Counter is reset on restart. */
    private double bytesInRate;
    /** Average (mean) bytes per second read from this broker since it started. Counter is reset on restart. */
    private double bytesOutRate;
    /** Total number of partitions stored in this broker. */
    private int numPartitions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.support.metrics.BrokerStatisticsRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.writtenBytes)) {
        this.writtenBytes = data().deepCopy(fields()[0].schema(), other.writtenBytes);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.readBytes)) {
        this.readBytes = data().deepCopy(fields()[1].schema(), other.readBytes);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bytesInRate)) {
        this.bytesInRate = data().deepCopy(fields()[2].schema(), other.bytesInRate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bytesOutRate)) {
        this.bytesOutRate = data().deepCopy(fields()[3].schema(), other.bytesOutRate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.numPartitions)) {
        this.numPartitions = data().deepCopy(fields()[4].schema(), other.numPartitions);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BrokerStatisticsRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.support.metrics.BrokerStatisticsRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.writtenBytes)) {
        this.writtenBytes = data().deepCopy(fields()[0].schema(), other.writtenBytes);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.readBytes)) {
        this.readBytes = data().deepCopy(fields()[1].schema(), other.readBytes);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bytesInRate)) {
        this.bytesInRate = data().deepCopy(fields()[2].schema(), other.bytesInRate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bytesOutRate)) {
        this.bytesOutRate = data().deepCopy(fields()[3].schema(), other.bytesOutRate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.numPartitions)) {
        this.numPartitions = data().deepCopy(fields()[4].schema(), other.numPartitions);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'writtenBytes' field.
      * Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted
      * @return The value.
      */
    public java.lang.Long getWrittenBytes() {
      return writtenBytes;
    }

    /**
      * Sets the value of the 'writtenBytes' field.
      * Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted
      * @param value The value of 'writtenBytes'.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerStatisticsRecord.Builder setWrittenBytes(long value) {
      validate(fields()[0], value);
      this.writtenBytes = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'writtenBytes' field has been set.
      * Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted
      * @return True if the 'writtenBytes' field has been set, false otherwise.
      */
    public boolean hasWrittenBytes() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'writtenBytes' field.
      * Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerStatisticsRecord.Builder clearWrittenBytes() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'readBytes' field.
      * Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation
      * @return The value.
      */
    public java.lang.Long getReadBytes() {
      return readBytes;
    }

    /**
      * Sets the value of the 'readBytes' field.
      * Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation
      * @param value The value of 'readBytes'.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerStatisticsRecord.Builder setReadBytes(long value) {
      validate(fields()[1], value);
      this.readBytes = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'readBytes' field has been set.
      * Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation
      * @return True if the 'readBytes' field has been set, false otherwise.
      */
    public boolean hasReadBytes() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'readBytes' field.
      * Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerStatisticsRecord.Builder clearReadBytes() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesInRate' field.
      * Average (mean) bytes per second written to this broker since it started. Counter is reset on restart.
      * @return The value.
      */
    public java.lang.Double getBytesInRate() {
      return bytesInRate;
    }

    /**
      * Sets the value of the 'bytesInRate' field.
      * Average (mean) bytes per second written to this broker since it started. Counter is reset on restart.
      * @param value The value of 'bytesInRate'.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerStatisticsRecord.Builder setBytesInRate(double value) {
      validate(fields()[2], value);
      this.bytesInRate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesInRate' field has been set.
      * Average (mean) bytes per second written to this broker since it started. Counter is reset on restart.
      * @return True if the 'bytesInRate' field has been set, false otherwise.
      */
    public boolean hasBytesInRate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bytesInRate' field.
      * Average (mean) bytes per second written to this broker since it started. Counter is reset on restart.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerStatisticsRecord.Builder clearBytesInRate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesOutRate' field.
      * Average (mean) bytes per second read from this broker since it started. Counter is reset on restart.
      * @return The value.
      */
    public java.lang.Double getBytesOutRate() {
      return bytesOutRate;
    }

    /**
      * Sets the value of the 'bytesOutRate' field.
      * Average (mean) bytes per second read from this broker since it started. Counter is reset on restart.
      * @param value The value of 'bytesOutRate'.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerStatisticsRecord.Builder setBytesOutRate(double value) {
      validate(fields()[3], value);
      this.bytesOutRate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesOutRate' field has been set.
      * Average (mean) bytes per second read from this broker since it started. Counter is reset on restart.
      * @return True if the 'bytesOutRate' field has been set, false otherwise.
      */
    public boolean hasBytesOutRate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'bytesOutRate' field.
      * Average (mean) bytes per second read from this broker since it started. Counter is reset on restart.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerStatisticsRecord.Builder clearBytesOutRate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'numPartitions' field.
      * Total number of partitions stored in this broker.
      * @return The value.
      */
    public java.lang.Integer getNumPartitions() {
      return numPartitions;
    }

    /**
      * Sets the value of the 'numPartitions' field.
      * Total number of partitions stored in this broker.
      * @param value The value of 'numPartitions'.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerStatisticsRecord.Builder setNumPartitions(int value) {
      validate(fields()[4], value);
      this.numPartitions = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'numPartitions' field has been set.
      * Total number of partitions stored in this broker.
      * @return True if the 'numPartitions' field has been set, false otherwise.
      */
    public boolean hasNumPartitions() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'numPartitions' field.
      * Total number of partitions stored in this broker.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerStatisticsRecord.Builder clearNumPartitions() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public BrokerStatisticsRecord build() {
      try {
        BrokerStatisticsRecord record = new BrokerStatisticsRecord();
        record.writtenBytes = fieldSetFlags()[0] ? this.writtenBytes : (java.lang.Long) defaultValue(fields()[0]);
        record.readBytes = fieldSetFlags()[1] ? this.readBytes : (java.lang.Long) defaultValue(fields()[1]);
        record.bytesInRate = fieldSetFlags()[2] ? this.bytesInRate : (java.lang.Double) defaultValue(fields()[2]);
        record.bytesOutRate = fieldSetFlags()[3] ? this.bytesOutRate : (java.lang.Double) defaultValue(fields()[3]);
        record.numPartitions = fieldSetFlags()[4] ? this.numPartitions : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
