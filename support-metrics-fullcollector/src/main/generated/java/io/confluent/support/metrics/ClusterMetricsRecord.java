/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.support.metrics;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ClusterMetricsRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3638978492867737300L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClusterMetricsRecord\",\"namespace\":\"io.confluent.support.metrics\",\"fields\":[{\"name\":\"replicationHistogram\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"Distribution of partitions by replication factor. Buckets represent replication factors 0-4 and >=5.\"},{\"name\":\"minIsrHistogram\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"Distribution of partitions by minIsr factor. Buckets represent minIsr factors 0-4 and >=5.\"},{\"name\":\"numberTopics\",\"type\":\"long\",\"doc\":\"Total number of topics in the cluster from a broker's metadata cache.\"},{\"name\":\"numberTopicsZk\",\"type\":\"long\",\"doc\":\"Total number of topics in the cluster obtained from Zookeeper.\"},{\"name\":\"numberPartitions\",\"type\":\"long\",\"doc\":\"Total number of partitions in the cluster from a broker's metadata cache.\"},{\"name\":\"zookeeperStats\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}}],\"doc\":\"Array of Zookeeper servers' statistics (currently only version number). Length of array is number of Zookeeper servers.\",\"default\":null},{\"name\":\"uncleanLeaderElectionHistogram\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"Distribution of partitions by uncleanLeaderElection option. 2 buckets representing FALSE and TRUE.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Distribution of partitions by replication factor. Buckets represent replication factors 0-4 and >=5. */
  @Deprecated public java.util.List<java.lang.Integer> replicationHistogram;
  /** Distribution of partitions by minIsr factor. Buckets represent minIsr factors 0-4 and >=5. */
  @Deprecated public java.util.List<java.lang.Integer> minIsrHistogram;
  /** Total number of topics in the cluster from a broker's metadata cache. */
  @Deprecated public long numberTopics;
  /** Total number of topics in the cluster obtained from Zookeeper. */
  @Deprecated public long numberTopicsZk;
  /** Total number of partitions in the cluster from a broker's metadata cache. */
  @Deprecated public long numberPartitions;
  /** Array of Zookeeper servers' statistics (currently only version number). Length of array is number of Zookeeper servers. */
  @Deprecated public java.util.List<java.util.Map<java.lang.String,java.lang.String>> zookeeperStats;
  /** Distribution of partitions by uncleanLeaderElection option. 2 buckets representing FALSE and TRUE. */
  @Deprecated public java.util.List<java.lang.Integer> uncleanLeaderElectionHistogram;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClusterMetricsRecord() {}

  /**
   * All-args constructor.
   * @param replicationHistogram Distribution of partitions by replication factor. Buckets represent replication factors 0-4 and >=5.
   * @param minIsrHistogram Distribution of partitions by minIsr factor. Buckets represent minIsr factors 0-4 and >=5.
   * @param numberTopics Total number of topics in the cluster from a broker's metadata cache.
   * @param numberTopicsZk Total number of topics in the cluster obtained from Zookeeper.
   * @param numberPartitions Total number of partitions in the cluster from a broker's metadata cache.
   * @param zookeeperStats Array of Zookeeper servers' statistics (currently only version number). Length of array is number of Zookeeper servers.
   * @param uncleanLeaderElectionHistogram Distribution of partitions by uncleanLeaderElection option. 2 buckets representing FALSE and TRUE.
   */
  public ClusterMetricsRecord(java.util.List<java.lang.Integer> replicationHistogram, java.util.List<java.lang.Integer> minIsrHistogram, java.lang.Long numberTopics, java.lang.Long numberTopicsZk, java.lang.Long numberPartitions, java.util.List<java.util.Map<java.lang.String,java.lang.String>> zookeeperStats, java.util.List<java.lang.Integer> uncleanLeaderElectionHistogram) {
    this.replicationHistogram = replicationHistogram;
    this.minIsrHistogram = minIsrHistogram;
    this.numberTopics = numberTopics;
    this.numberTopicsZk = numberTopicsZk;
    this.numberPartitions = numberPartitions;
    this.zookeeperStats = zookeeperStats;
    this.uncleanLeaderElectionHistogram = uncleanLeaderElectionHistogram;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return replicationHistogram;
    case 1: return minIsrHistogram;
    case 2: return numberTopics;
    case 3: return numberTopicsZk;
    case 4: return numberPartitions;
    case 5: return zookeeperStats;
    case 6: return uncleanLeaderElectionHistogram;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: replicationHistogram = (java.util.List<java.lang.Integer>)value$; break;
    case 1: minIsrHistogram = (java.util.List<java.lang.Integer>)value$; break;
    case 2: numberTopics = (java.lang.Long)value$; break;
    case 3: numberTopicsZk = (java.lang.Long)value$; break;
    case 4: numberPartitions = (java.lang.Long)value$; break;
    case 5: zookeeperStats = (java.util.List<java.util.Map<java.lang.String,java.lang.String>>)value$; break;
    case 6: uncleanLeaderElectionHistogram = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'replicationHistogram' field.
   * @return Distribution of partitions by replication factor. Buckets represent replication factors 0-4 and >=5.
   */
  public java.util.List<java.lang.Integer> getReplicationHistogram() {
    return replicationHistogram;
  }

  /**
   * Sets the value of the 'replicationHistogram' field.
   * Distribution of partitions by replication factor. Buckets represent replication factors 0-4 and >=5.
   * @param value the value to set.
   */
  public void setReplicationHistogram(java.util.List<java.lang.Integer> value) {
    this.replicationHistogram = value;
  }

  /**
   * Gets the value of the 'minIsrHistogram' field.
   * @return Distribution of partitions by minIsr factor. Buckets represent minIsr factors 0-4 and >=5.
   */
  public java.util.List<java.lang.Integer> getMinIsrHistogram() {
    return minIsrHistogram;
  }

  /**
   * Sets the value of the 'minIsrHistogram' field.
   * Distribution of partitions by minIsr factor. Buckets represent minIsr factors 0-4 and >=5.
   * @param value the value to set.
   */
  public void setMinIsrHistogram(java.util.List<java.lang.Integer> value) {
    this.minIsrHistogram = value;
  }

  /**
   * Gets the value of the 'numberTopics' field.
   * @return Total number of topics in the cluster from a broker's metadata cache.
   */
  public java.lang.Long getNumberTopics() {
    return numberTopics;
  }

  /**
   * Sets the value of the 'numberTopics' field.
   * Total number of topics in the cluster from a broker's metadata cache.
   * @param value the value to set.
   */
  public void setNumberTopics(java.lang.Long value) {
    this.numberTopics = value;
  }

  /**
   * Gets the value of the 'numberTopicsZk' field.
   * @return Total number of topics in the cluster obtained from Zookeeper.
   */
  public java.lang.Long getNumberTopicsZk() {
    return numberTopicsZk;
  }

  /**
   * Sets the value of the 'numberTopicsZk' field.
   * Total number of topics in the cluster obtained from Zookeeper.
   * @param value the value to set.
   */
  public void setNumberTopicsZk(java.lang.Long value) {
    this.numberTopicsZk = value;
  }

  /**
   * Gets the value of the 'numberPartitions' field.
   * @return Total number of partitions in the cluster from a broker's metadata cache.
   */
  public java.lang.Long getNumberPartitions() {
    return numberPartitions;
  }

  /**
   * Sets the value of the 'numberPartitions' field.
   * Total number of partitions in the cluster from a broker's metadata cache.
   * @param value the value to set.
   */
  public void setNumberPartitions(java.lang.Long value) {
    this.numberPartitions = value;
  }

  /**
   * Gets the value of the 'zookeeperStats' field.
   * @return Array of Zookeeper servers' statistics (currently only version number). Length of array is number of Zookeeper servers.
   */
  public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getZookeeperStats() {
    return zookeeperStats;
  }

  /**
   * Sets the value of the 'zookeeperStats' field.
   * Array of Zookeeper servers' statistics (currently only version number). Length of array is number of Zookeeper servers.
   * @param value the value to set.
   */
  public void setZookeeperStats(java.util.List<java.util.Map<java.lang.String,java.lang.String>> value) {
    this.zookeeperStats = value;
  }

  /**
   * Gets the value of the 'uncleanLeaderElectionHistogram' field.
   * @return Distribution of partitions by uncleanLeaderElection option. 2 buckets representing FALSE and TRUE.
   */
  public java.util.List<java.lang.Integer> getUncleanLeaderElectionHistogram() {
    return uncleanLeaderElectionHistogram;
  }

  /**
   * Sets the value of the 'uncleanLeaderElectionHistogram' field.
   * Distribution of partitions by uncleanLeaderElection option. 2 buckets representing FALSE and TRUE.
   * @param value the value to set.
   */
  public void setUncleanLeaderElectionHistogram(java.util.List<java.lang.Integer> value) {
    this.uncleanLeaderElectionHistogram = value;
  }

  /**
   * Creates a new ClusterMetricsRecord RecordBuilder.
   * @return A new ClusterMetricsRecord RecordBuilder
   */
  public static io.confluent.support.metrics.ClusterMetricsRecord.Builder newBuilder() {
    return new io.confluent.support.metrics.ClusterMetricsRecord.Builder();
  }

  /**
   * Creates a new ClusterMetricsRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClusterMetricsRecord RecordBuilder
   */
  public static io.confluent.support.metrics.ClusterMetricsRecord.Builder newBuilder(io.confluent.support.metrics.ClusterMetricsRecord.Builder other) {
    return new io.confluent.support.metrics.ClusterMetricsRecord.Builder(other);
  }

  /**
   * Creates a new ClusterMetricsRecord RecordBuilder by copying an existing ClusterMetricsRecord instance.
   * @param other The existing instance to copy.
   * @return A new ClusterMetricsRecord RecordBuilder
   */
  public static io.confluent.support.metrics.ClusterMetricsRecord.Builder newBuilder(io.confluent.support.metrics.ClusterMetricsRecord other) {
    return new io.confluent.support.metrics.ClusterMetricsRecord.Builder(other);
  }

  /**
   * RecordBuilder for ClusterMetricsRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClusterMetricsRecord>
    implements org.apache.avro.data.RecordBuilder<ClusterMetricsRecord> {

    /** Distribution of partitions by replication factor. Buckets represent replication factors 0-4 and >=5. */
    private java.util.List<java.lang.Integer> replicationHistogram;
    /** Distribution of partitions by minIsr factor. Buckets represent minIsr factors 0-4 and >=5. */
    private java.util.List<java.lang.Integer> minIsrHistogram;
    /** Total number of topics in the cluster from a broker's metadata cache. */
    private long numberTopics;
    /** Total number of topics in the cluster obtained from Zookeeper. */
    private long numberTopicsZk;
    /** Total number of partitions in the cluster from a broker's metadata cache. */
    private long numberPartitions;
    /** Array of Zookeeper servers' statistics (currently only version number). Length of array is number of Zookeeper servers. */
    private java.util.List<java.util.Map<java.lang.String,java.lang.String>> zookeeperStats;
    /** Distribution of partitions by uncleanLeaderElection option. 2 buckets representing FALSE and TRUE. */
    private java.util.List<java.lang.Integer> uncleanLeaderElectionHistogram;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.support.metrics.ClusterMetricsRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.replicationHistogram)) {
        this.replicationHistogram = data().deepCopy(fields()[0].schema(), other.replicationHistogram);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.minIsrHistogram)) {
        this.minIsrHistogram = data().deepCopy(fields()[1].schema(), other.minIsrHistogram);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numberTopics)) {
        this.numberTopics = data().deepCopy(fields()[2].schema(), other.numberTopics);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.numberTopicsZk)) {
        this.numberTopicsZk = data().deepCopy(fields()[3].schema(), other.numberTopicsZk);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.numberPartitions)) {
        this.numberPartitions = data().deepCopy(fields()[4].schema(), other.numberPartitions);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.zookeeperStats)) {
        this.zookeeperStats = data().deepCopy(fields()[5].schema(), other.zookeeperStats);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.uncleanLeaderElectionHistogram)) {
        this.uncleanLeaderElectionHistogram = data().deepCopy(fields()[6].schema(), other.uncleanLeaderElectionHistogram);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ClusterMetricsRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.support.metrics.ClusterMetricsRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.replicationHistogram)) {
        this.replicationHistogram = data().deepCopy(fields()[0].schema(), other.replicationHistogram);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.minIsrHistogram)) {
        this.minIsrHistogram = data().deepCopy(fields()[1].schema(), other.minIsrHistogram);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numberTopics)) {
        this.numberTopics = data().deepCopy(fields()[2].schema(), other.numberTopics);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.numberTopicsZk)) {
        this.numberTopicsZk = data().deepCopy(fields()[3].schema(), other.numberTopicsZk);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.numberPartitions)) {
        this.numberPartitions = data().deepCopy(fields()[4].schema(), other.numberPartitions);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.zookeeperStats)) {
        this.zookeeperStats = data().deepCopy(fields()[5].schema(), other.zookeeperStats);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.uncleanLeaderElectionHistogram)) {
        this.uncleanLeaderElectionHistogram = data().deepCopy(fields()[6].schema(), other.uncleanLeaderElectionHistogram);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'replicationHistogram' field.
      * Distribution of partitions by replication factor. Buckets represent replication factors 0-4 and >=5.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getReplicationHistogram() {
      return replicationHistogram;
    }

    /**
      * Sets the value of the 'replicationHistogram' field.
      * Distribution of partitions by replication factor. Buckets represent replication factors 0-4 and >=5.
      * @param value The value of 'replicationHistogram'.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder setReplicationHistogram(java.util.List<java.lang.Integer> value) {
      validate(fields()[0], value);
      this.replicationHistogram = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'replicationHistogram' field has been set.
      * Distribution of partitions by replication factor. Buckets represent replication factors 0-4 and >=5.
      * @return True if the 'replicationHistogram' field has been set, false otherwise.
      */
    public boolean hasReplicationHistogram() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'replicationHistogram' field.
      * Distribution of partitions by replication factor. Buckets represent replication factors 0-4 and >=5.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder clearReplicationHistogram() {
      replicationHistogram = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'minIsrHistogram' field.
      * Distribution of partitions by minIsr factor. Buckets represent minIsr factors 0-4 and >=5.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getMinIsrHistogram() {
      return minIsrHistogram;
    }

    /**
      * Sets the value of the 'minIsrHistogram' field.
      * Distribution of partitions by minIsr factor. Buckets represent minIsr factors 0-4 and >=5.
      * @param value The value of 'minIsrHistogram'.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder setMinIsrHistogram(java.util.List<java.lang.Integer> value) {
      validate(fields()[1], value);
      this.minIsrHistogram = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'minIsrHistogram' field has been set.
      * Distribution of partitions by minIsr factor. Buckets represent minIsr factors 0-4 and >=5.
      * @return True if the 'minIsrHistogram' field has been set, false otherwise.
      */
    public boolean hasMinIsrHistogram() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'minIsrHistogram' field.
      * Distribution of partitions by minIsr factor. Buckets represent minIsr factors 0-4 and >=5.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder clearMinIsrHistogram() {
      minIsrHistogram = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberTopics' field.
      * Total number of topics in the cluster from a broker's metadata cache.
      * @return The value.
      */
    public java.lang.Long getNumberTopics() {
      return numberTopics;
    }

    /**
      * Sets the value of the 'numberTopics' field.
      * Total number of topics in the cluster from a broker's metadata cache.
      * @param value The value of 'numberTopics'.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder setNumberTopics(long value) {
      validate(fields()[2], value);
      this.numberTopics = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'numberTopics' field has been set.
      * Total number of topics in the cluster from a broker's metadata cache.
      * @return True if the 'numberTopics' field has been set, false otherwise.
      */
    public boolean hasNumberTopics() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'numberTopics' field.
      * Total number of topics in the cluster from a broker's metadata cache.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder clearNumberTopics() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberTopicsZk' field.
      * Total number of topics in the cluster obtained from Zookeeper.
      * @return The value.
      */
    public java.lang.Long getNumberTopicsZk() {
      return numberTopicsZk;
    }

    /**
      * Sets the value of the 'numberTopicsZk' field.
      * Total number of topics in the cluster obtained from Zookeeper.
      * @param value The value of 'numberTopicsZk'.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder setNumberTopicsZk(long value) {
      validate(fields()[3], value);
      this.numberTopicsZk = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'numberTopicsZk' field has been set.
      * Total number of topics in the cluster obtained from Zookeeper.
      * @return True if the 'numberTopicsZk' field has been set, false otherwise.
      */
    public boolean hasNumberTopicsZk() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'numberTopicsZk' field.
      * Total number of topics in the cluster obtained from Zookeeper.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder clearNumberTopicsZk() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberPartitions' field.
      * Total number of partitions in the cluster from a broker's metadata cache.
      * @return The value.
      */
    public java.lang.Long getNumberPartitions() {
      return numberPartitions;
    }

    /**
      * Sets the value of the 'numberPartitions' field.
      * Total number of partitions in the cluster from a broker's metadata cache.
      * @param value The value of 'numberPartitions'.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder setNumberPartitions(long value) {
      validate(fields()[4], value);
      this.numberPartitions = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'numberPartitions' field has been set.
      * Total number of partitions in the cluster from a broker's metadata cache.
      * @return True if the 'numberPartitions' field has been set, false otherwise.
      */
    public boolean hasNumberPartitions() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'numberPartitions' field.
      * Total number of partitions in the cluster from a broker's metadata cache.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder clearNumberPartitions() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'zookeeperStats' field.
      * Array of Zookeeper servers' statistics (currently only version number). Length of array is number of Zookeeper servers.
      * @return The value.
      */
    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getZookeeperStats() {
      return zookeeperStats;
    }

    /**
      * Sets the value of the 'zookeeperStats' field.
      * Array of Zookeeper servers' statistics (currently only version number). Length of array is number of Zookeeper servers.
      * @param value The value of 'zookeeperStats'.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder setZookeeperStats(java.util.List<java.util.Map<java.lang.String,java.lang.String>> value) {
      validate(fields()[5], value);
      this.zookeeperStats = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'zookeeperStats' field has been set.
      * Array of Zookeeper servers' statistics (currently only version number). Length of array is number of Zookeeper servers.
      * @return True if the 'zookeeperStats' field has been set, false otherwise.
      */
    public boolean hasZookeeperStats() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'zookeeperStats' field.
      * Array of Zookeeper servers' statistics (currently only version number). Length of array is number of Zookeeper servers.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder clearZookeeperStats() {
      zookeeperStats = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'uncleanLeaderElectionHistogram' field.
      * Distribution of partitions by uncleanLeaderElection option. 2 buckets representing FALSE and TRUE.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getUncleanLeaderElectionHistogram() {
      return uncleanLeaderElectionHistogram;
    }

    /**
      * Sets the value of the 'uncleanLeaderElectionHistogram' field.
      * Distribution of partitions by uncleanLeaderElection option. 2 buckets representing FALSE and TRUE.
      * @param value The value of 'uncleanLeaderElectionHistogram'.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder setUncleanLeaderElectionHistogram(java.util.List<java.lang.Integer> value) {
      validate(fields()[6], value);
      this.uncleanLeaderElectionHistogram = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'uncleanLeaderElectionHistogram' field has been set.
      * Distribution of partitions by uncleanLeaderElection option. 2 buckets representing FALSE and TRUE.
      * @return True if the 'uncleanLeaderElectionHistogram' field has been set, false otherwise.
      */
    public boolean hasUncleanLeaderElectionHistogram() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'uncleanLeaderElectionHistogram' field.
      * Distribution of partitions by uncleanLeaderElection option. 2 buckets representing FALSE and TRUE.
      * @return This builder.
      */
    public io.confluent.support.metrics.ClusterMetricsRecord.Builder clearUncleanLeaderElectionHistogram() {
      uncleanLeaderElectionHistogram = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public ClusterMetricsRecord build() {
      try {
        ClusterMetricsRecord record = new ClusterMetricsRecord();
        record.replicationHistogram = fieldSetFlags()[0] ? this.replicationHistogram : (java.util.List<java.lang.Integer>) defaultValue(fields()[0]);
        record.minIsrHistogram = fieldSetFlags()[1] ? this.minIsrHistogram : (java.util.List<java.lang.Integer>) defaultValue(fields()[1]);
        record.numberTopics = fieldSetFlags()[2] ? this.numberTopics : (java.lang.Long) defaultValue(fields()[2]);
        record.numberTopicsZk = fieldSetFlags()[3] ? this.numberTopicsZk : (java.lang.Long) defaultValue(fields()[3]);
        record.numberPartitions = fieldSetFlags()[4] ? this.numberPartitions : (java.lang.Long) defaultValue(fields()[4]);
        record.zookeeperStats = fieldSetFlags()[5] ? this.zookeeperStats : (java.util.List<java.util.Map<java.lang.String,java.lang.String>>) defaultValue(fields()[5]);
        record.uncleanLeaderElectionHistogram = fieldSetFlags()[6] ? this.uncleanLeaderElectionHistogram : (java.util.List<java.lang.Integer>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
