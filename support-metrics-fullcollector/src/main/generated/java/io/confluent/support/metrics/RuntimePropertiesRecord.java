/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.support.metrics;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RuntimePropertiesRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 437725134462149471L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RuntimePropertiesRecord\",\"namespace\":\"io.confluent.support.metrics\",\"fields\":[{\"name\":\"availableProcessors\",\"type\":\"int\"},{\"name\":\"freeMemoryBytes\",\"type\":\"long\"},{\"name\":\"maxMemoryBytes\",\"type\":\"long\"},{\"name\":\"totalMemoryBytes\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int availableProcessors;
  @Deprecated public long freeMemoryBytes;
  @Deprecated public long maxMemoryBytes;
  @Deprecated public long totalMemoryBytes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RuntimePropertiesRecord() {}

  /**
   * All-args constructor.
   * @param availableProcessors The new value for availableProcessors
   * @param freeMemoryBytes The new value for freeMemoryBytes
   * @param maxMemoryBytes The new value for maxMemoryBytes
   * @param totalMemoryBytes The new value for totalMemoryBytes
   */
  public RuntimePropertiesRecord(java.lang.Integer availableProcessors, java.lang.Long freeMemoryBytes, java.lang.Long maxMemoryBytes, java.lang.Long totalMemoryBytes) {
    this.availableProcessors = availableProcessors;
    this.freeMemoryBytes = freeMemoryBytes;
    this.maxMemoryBytes = maxMemoryBytes;
    this.totalMemoryBytes = totalMemoryBytes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return availableProcessors;
    case 1: return freeMemoryBytes;
    case 2: return maxMemoryBytes;
    case 3: return totalMemoryBytes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: availableProcessors = (java.lang.Integer)value$; break;
    case 1: freeMemoryBytes = (java.lang.Long)value$; break;
    case 2: maxMemoryBytes = (java.lang.Long)value$; break;
    case 3: totalMemoryBytes = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'availableProcessors' field.
   * @return The value of the 'availableProcessors' field.
   */
  public java.lang.Integer getAvailableProcessors() {
    return availableProcessors;
  }

  /**
   * Sets the value of the 'availableProcessors' field.
   * @param value the value to set.
   */
  public void setAvailableProcessors(java.lang.Integer value) {
    this.availableProcessors = value;
  }

  /**
   * Gets the value of the 'freeMemoryBytes' field.
   * @return The value of the 'freeMemoryBytes' field.
   */
  public java.lang.Long getFreeMemoryBytes() {
    return freeMemoryBytes;
  }

  /**
   * Sets the value of the 'freeMemoryBytes' field.
   * @param value the value to set.
   */
  public void setFreeMemoryBytes(java.lang.Long value) {
    this.freeMemoryBytes = value;
  }

  /**
   * Gets the value of the 'maxMemoryBytes' field.
   * @return The value of the 'maxMemoryBytes' field.
   */
  public java.lang.Long getMaxMemoryBytes() {
    return maxMemoryBytes;
  }

  /**
   * Sets the value of the 'maxMemoryBytes' field.
   * @param value the value to set.
   */
  public void setMaxMemoryBytes(java.lang.Long value) {
    this.maxMemoryBytes = value;
  }

  /**
   * Gets the value of the 'totalMemoryBytes' field.
   * @return The value of the 'totalMemoryBytes' field.
   */
  public java.lang.Long getTotalMemoryBytes() {
    return totalMemoryBytes;
  }

  /**
   * Sets the value of the 'totalMemoryBytes' field.
   * @param value the value to set.
   */
  public void setTotalMemoryBytes(java.lang.Long value) {
    this.totalMemoryBytes = value;
  }

  /**
   * Creates a new RuntimePropertiesRecord RecordBuilder.
   * @return A new RuntimePropertiesRecord RecordBuilder
   */
  public static io.confluent.support.metrics.RuntimePropertiesRecord.Builder newBuilder() {
    return new io.confluent.support.metrics.RuntimePropertiesRecord.Builder();
  }

  /**
   * Creates a new RuntimePropertiesRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RuntimePropertiesRecord RecordBuilder
   */
  public static io.confluent.support.metrics.RuntimePropertiesRecord.Builder newBuilder(io.confluent.support.metrics.RuntimePropertiesRecord.Builder other) {
    return new io.confluent.support.metrics.RuntimePropertiesRecord.Builder(other);
  }

  /**
   * Creates a new RuntimePropertiesRecord RecordBuilder by copying an existing RuntimePropertiesRecord instance.
   * @param other The existing instance to copy.
   * @return A new RuntimePropertiesRecord RecordBuilder
   */
  public static io.confluent.support.metrics.RuntimePropertiesRecord.Builder newBuilder(io.confluent.support.metrics.RuntimePropertiesRecord other) {
    return new io.confluent.support.metrics.RuntimePropertiesRecord.Builder(other);
  }

  /**
   * RecordBuilder for RuntimePropertiesRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RuntimePropertiesRecord>
    implements org.apache.avro.data.RecordBuilder<RuntimePropertiesRecord> {

    private int availableProcessors;
    private long freeMemoryBytes;
    private long maxMemoryBytes;
    private long totalMemoryBytes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.support.metrics.RuntimePropertiesRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.availableProcessors)) {
        this.availableProcessors = data().deepCopy(fields()[0].schema(), other.availableProcessors);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.freeMemoryBytes)) {
        this.freeMemoryBytes = data().deepCopy(fields()[1].schema(), other.freeMemoryBytes);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.maxMemoryBytes)) {
        this.maxMemoryBytes = data().deepCopy(fields()[2].schema(), other.maxMemoryBytes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalMemoryBytes)) {
        this.totalMemoryBytes = data().deepCopy(fields()[3].schema(), other.totalMemoryBytes);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RuntimePropertiesRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.support.metrics.RuntimePropertiesRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.availableProcessors)) {
        this.availableProcessors = data().deepCopy(fields()[0].schema(), other.availableProcessors);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.freeMemoryBytes)) {
        this.freeMemoryBytes = data().deepCopy(fields()[1].schema(), other.freeMemoryBytes);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.maxMemoryBytes)) {
        this.maxMemoryBytes = data().deepCopy(fields()[2].schema(), other.maxMemoryBytes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalMemoryBytes)) {
        this.totalMemoryBytes = data().deepCopy(fields()[3].schema(), other.totalMemoryBytes);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'availableProcessors' field.
      * @return The value.
      */
    public java.lang.Integer getAvailableProcessors() {
      return availableProcessors;
    }

    /**
      * Sets the value of the 'availableProcessors' field.
      * @param value The value of 'availableProcessors'.
      * @return This builder.
      */
    public io.confluent.support.metrics.RuntimePropertiesRecord.Builder setAvailableProcessors(int value) {
      validate(fields()[0], value);
      this.availableProcessors = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'availableProcessors' field has been set.
      * @return True if the 'availableProcessors' field has been set, false otherwise.
      */
    public boolean hasAvailableProcessors() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'availableProcessors' field.
      * @return This builder.
      */
    public io.confluent.support.metrics.RuntimePropertiesRecord.Builder clearAvailableProcessors() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'freeMemoryBytes' field.
      * @return The value.
      */
    public java.lang.Long getFreeMemoryBytes() {
      return freeMemoryBytes;
    }

    /**
      * Sets the value of the 'freeMemoryBytes' field.
      * @param value The value of 'freeMemoryBytes'.
      * @return This builder.
      */
    public io.confluent.support.metrics.RuntimePropertiesRecord.Builder setFreeMemoryBytes(long value) {
      validate(fields()[1], value);
      this.freeMemoryBytes = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'freeMemoryBytes' field has been set.
      * @return True if the 'freeMemoryBytes' field has been set, false otherwise.
      */
    public boolean hasFreeMemoryBytes() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'freeMemoryBytes' field.
      * @return This builder.
      */
    public io.confluent.support.metrics.RuntimePropertiesRecord.Builder clearFreeMemoryBytes() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxMemoryBytes' field.
      * @return The value.
      */
    public java.lang.Long getMaxMemoryBytes() {
      return maxMemoryBytes;
    }

    /**
      * Sets the value of the 'maxMemoryBytes' field.
      * @param value The value of 'maxMemoryBytes'.
      * @return This builder.
      */
    public io.confluent.support.metrics.RuntimePropertiesRecord.Builder setMaxMemoryBytes(long value) {
      validate(fields()[2], value);
      this.maxMemoryBytes = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'maxMemoryBytes' field has been set.
      * @return True if the 'maxMemoryBytes' field has been set, false otherwise.
      */
    public boolean hasMaxMemoryBytes() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'maxMemoryBytes' field.
      * @return This builder.
      */
    public io.confluent.support.metrics.RuntimePropertiesRecord.Builder clearMaxMemoryBytes() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalMemoryBytes' field.
      * @return The value.
      */
    public java.lang.Long getTotalMemoryBytes() {
      return totalMemoryBytes;
    }

    /**
      * Sets the value of the 'totalMemoryBytes' field.
      * @param value The value of 'totalMemoryBytes'.
      * @return This builder.
      */
    public io.confluent.support.metrics.RuntimePropertiesRecord.Builder setTotalMemoryBytes(long value) {
      validate(fields()[3], value);
      this.totalMemoryBytes = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalMemoryBytes' field has been set.
      * @return True if the 'totalMemoryBytes' field has been set, false otherwise.
      */
    public boolean hasTotalMemoryBytes() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalMemoryBytes' field.
      * @return This builder.
      */
    public io.confluent.support.metrics.RuntimePropertiesRecord.Builder clearTotalMemoryBytes() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public RuntimePropertiesRecord build() {
      try {
        RuntimePropertiesRecord record = new RuntimePropertiesRecord();
        record.availableProcessors = fieldSetFlags()[0] ? this.availableProcessors : (java.lang.Integer) defaultValue(fields()[0]);
        record.freeMemoryBytes = fieldSetFlags()[1] ? this.freeMemoryBytes : (java.lang.Long) defaultValue(fields()[1]);
        record.maxMemoryBytes = fieldSetFlags()[2] ? this.maxMemoryBytes : (java.lang.Long) defaultValue(fields()[2]);
        record.totalMemoryBytes = fieldSetFlags()[3] ? this.totalMemoryBytes : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
