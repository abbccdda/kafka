/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.support.metrics;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BrokerMetricsRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4448341003689447840L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BrokerMetricsRecord\",\"namespace\":\"io.confluent.support.metrics\",\"fields\":[{\"name\":\"brokerConfiguration\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"doc\":\"Kafka configuration of this broker.\",\"default\":null},{\"name\":\"javaSystemProperties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"doc\":\"Java system properties of this broker, obtained through System.getProperties().\",\"default\":null},{\"name\":\"jvmRuntimeEnvironment\",\"type\":{\"type\":\"record\",\"name\":\"RuntimePropertiesRecord\",\"fields\":[{\"name\":\"availableProcessors\",\"type\":\"int\"},{\"name\":\"freeMemoryBytes\",\"type\":\"long\"},{\"name\":\"maxMemoryBytes\",\"type\":\"long\"},{\"name\":\"totalMemoryBytes\",\"type\":\"long\"}]},\"doc\":\"Runtime environment information of this broker's JVM.\"},{\"name\":\"brokerStatistics\",\"type\":{\"type\":\"record\",\"name\":\"BrokerStatisticsRecord\",\"fields\":[{\"name\":\"writtenBytes\",\"type\":\"long\",\"doc\":\"Bytes written to this broker since it started. Counter is reset on restart. Counts only bytes written to such partitions for which this broker was a leader at the time of the write operation, i.e., bytes written due to replication are not being counted\"},{\"name\":\"readBytes\",\"type\":\"long\",\"doc\":\"Bytes read from this broker since it started. Counter is reset on restart. Counts only bytes read from such partitions for which this broker was a leader at the time of the read operation\"},{\"name\":\"bytesInRate\",\"type\":\"double\",\"doc\":\"Average (mean) bytes per second written to this broker since it started. Counter is reset on restart.\"},{\"name\":\"bytesOutRate\",\"type\":\"double\",\"doc\":\"Average (mean) bytes per second read from this broker since it started. Counter is reset on restart.\"},{\"name\":\"numPartitions\",\"type\":\"int\",\"doc\":\"Total number of partitions stored in this broker.\"}]},\"doc\":\"Various statistics obtained from a running broker\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Kafka configuration of this broker. */
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> brokerConfiguration;
  /** Java system properties of this broker, obtained through System.getProperties(). */
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> javaSystemProperties;
  /** Runtime environment information of this broker's JVM. */
  @Deprecated public io.confluent.support.metrics.RuntimePropertiesRecord jvmRuntimeEnvironment;
  /** Various statistics obtained from a running broker */
  @Deprecated public io.confluent.support.metrics.BrokerStatisticsRecord brokerStatistics;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BrokerMetricsRecord() {}

  /**
   * All-args constructor.
   * @param brokerConfiguration Kafka configuration of this broker.
   * @param javaSystemProperties Java system properties of this broker, obtained through System.getProperties().
   * @param jvmRuntimeEnvironment Runtime environment information of this broker's JVM.
   * @param brokerStatistics Various statistics obtained from a running broker
   */
  public BrokerMetricsRecord(java.util.Map<java.lang.String,java.lang.String> brokerConfiguration, java.util.Map<java.lang.String,java.lang.String> javaSystemProperties, io.confluent.support.metrics.RuntimePropertiesRecord jvmRuntimeEnvironment, io.confluent.support.metrics.BrokerStatisticsRecord brokerStatistics) {
    this.brokerConfiguration = brokerConfiguration;
    this.javaSystemProperties = javaSystemProperties;
    this.jvmRuntimeEnvironment = jvmRuntimeEnvironment;
    this.brokerStatistics = brokerStatistics;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return brokerConfiguration;
    case 1: return javaSystemProperties;
    case 2: return jvmRuntimeEnvironment;
    case 3: return brokerStatistics;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: brokerConfiguration = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 1: javaSystemProperties = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 2: jvmRuntimeEnvironment = (io.confluent.support.metrics.RuntimePropertiesRecord)value$; break;
    case 3: brokerStatistics = (io.confluent.support.metrics.BrokerStatisticsRecord)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'brokerConfiguration' field.
   * @return Kafka configuration of this broker.
   */
  public java.util.Map<java.lang.String,java.lang.String> getBrokerConfiguration() {
    return brokerConfiguration;
  }

  /**
   * Sets the value of the 'brokerConfiguration' field.
   * Kafka configuration of this broker.
   * @param value the value to set.
   */
  public void setBrokerConfiguration(java.util.Map<java.lang.String,java.lang.String> value) {
    this.brokerConfiguration = value;
  }

  /**
   * Gets the value of the 'javaSystemProperties' field.
   * @return Java system properties of this broker, obtained through System.getProperties().
   */
  public java.util.Map<java.lang.String,java.lang.String> getJavaSystemProperties() {
    return javaSystemProperties;
  }

  /**
   * Sets the value of the 'javaSystemProperties' field.
   * Java system properties of this broker, obtained through System.getProperties().
   * @param value the value to set.
   */
  public void setJavaSystemProperties(java.util.Map<java.lang.String,java.lang.String> value) {
    this.javaSystemProperties = value;
  }

  /**
   * Gets the value of the 'jvmRuntimeEnvironment' field.
   * @return Runtime environment information of this broker's JVM.
   */
  public io.confluent.support.metrics.RuntimePropertiesRecord getJvmRuntimeEnvironment() {
    return jvmRuntimeEnvironment;
  }

  /**
   * Sets the value of the 'jvmRuntimeEnvironment' field.
   * Runtime environment information of this broker's JVM.
   * @param value the value to set.
   */
  public void setJvmRuntimeEnvironment(io.confluent.support.metrics.RuntimePropertiesRecord value) {
    this.jvmRuntimeEnvironment = value;
  }

  /**
   * Gets the value of the 'brokerStatistics' field.
   * @return Various statistics obtained from a running broker
   */
  public io.confluent.support.metrics.BrokerStatisticsRecord getBrokerStatistics() {
    return brokerStatistics;
  }

  /**
   * Sets the value of the 'brokerStatistics' field.
   * Various statistics obtained from a running broker
   * @param value the value to set.
   */
  public void setBrokerStatistics(io.confluent.support.metrics.BrokerStatisticsRecord value) {
    this.brokerStatistics = value;
  }

  /**
   * Creates a new BrokerMetricsRecord RecordBuilder.
   * @return A new BrokerMetricsRecord RecordBuilder
   */
  public static io.confluent.support.metrics.BrokerMetricsRecord.Builder newBuilder() {
    return new io.confluent.support.metrics.BrokerMetricsRecord.Builder();
  }

  /**
   * Creates a new BrokerMetricsRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BrokerMetricsRecord RecordBuilder
   */
  public static io.confluent.support.metrics.BrokerMetricsRecord.Builder newBuilder(io.confluent.support.metrics.BrokerMetricsRecord.Builder other) {
    return new io.confluent.support.metrics.BrokerMetricsRecord.Builder(other);
  }

  /**
   * Creates a new BrokerMetricsRecord RecordBuilder by copying an existing BrokerMetricsRecord instance.
   * @param other The existing instance to copy.
   * @return A new BrokerMetricsRecord RecordBuilder
   */
  public static io.confluent.support.metrics.BrokerMetricsRecord.Builder newBuilder(io.confluent.support.metrics.BrokerMetricsRecord other) {
    return new io.confluent.support.metrics.BrokerMetricsRecord.Builder(other);
  }

  /**
   * RecordBuilder for BrokerMetricsRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BrokerMetricsRecord>
    implements org.apache.avro.data.RecordBuilder<BrokerMetricsRecord> {

    /** Kafka configuration of this broker. */
    private java.util.Map<java.lang.String,java.lang.String> brokerConfiguration;
    /** Java system properties of this broker, obtained through System.getProperties(). */
    private java.util.Map<java.lang.String,java.lang.String> javaSystemProperties;
    /** Runtime environment information of this broker's JVM. */
    private io.confluent.support.metrics.RuntimePropertiesRecord jvmRuntimeEnvironment;
    private io.confluent.support.metrics.RuntimePropertiesRecord.Builder jvmRuntimeEnvironmentBuilder;
    /** Various statistics obtained from a running broker */
    private io.confluent.support.metrics.BrokerStatisticsRecord brokerStatistics;
    private io.confluent.support.metrics.BrokerStatisticsRecord.Builder brokerStatisticsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.support.metrics.BrokerMetricsRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.brokerConfiguration)) {
        this.brokerConfiguration = data().deepCopy(fields()[0].schema(), other.brokerConfiguration);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.javaSystemProperties)) {
        this.javaSystemProperties = data().deepCopy(fields()[1].schema(), other.javaSystemProperties);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.jvmRuntimeEnvironment)) {
        this.jvmRuntimeEnvironment = data().deepCopy(fields()[2].schema(), other.jvmRuntimeEnvironment);
        fieldSetFlags()[2] = true;
      }
      if (other.hasJvmRuntimeEnvironmentBuilder()) {
        this.jvmRuntimeEnvironmentBuilder = io.confluent.support.metrics.RuntimePropertiesRecord.newBuilder(other.getJvmRuntimeEnvironmentBuilder());
      }
      if (isValidValue(fields()[3], other.brokerStatistics)) {
        this.brokerStatistics = data().deepCopy(fields()[3].schema(), other.brokerStatistics);
        fieldSetFlags()[3] = true;
      }
      if (other.hasBrokerStatisticsBuilder()) {
        this.brokerStatisticsBuilder = io.confluent.support.metrics.BrokerStatisticsRecord.newBuilder(other.getBrokerStatisticsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing BrokerMetricsRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.support.metrics.BrokerMetricsRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.brokerConfiguration)) {
        this.brokerConfiguration = data().deepCopy(fields()[0].schema(), other.brokerConfiguration);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.javaSystemProperties)) {
        this.javaSystemProperties = data().deepCopy(fields()[1].schema(), other.javaSystemProperties);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.jvmRuntimeEnvironment)) {
        this.jvmRuntimeEnvironment = data().deepCopy(fields()[2].schema(), other.jvmRuntimeEnvironment);
        fieldSetFlags()[2] = true;
      }
      this.jvmRuntimeEnvironmentBuilder = null;
      if (isValidValue(fields()[3], other.brokerStatistics)) {
        this.brokerStatistics = data().deepCopy(fields()[3].schema(), other.brokerStatistics);
        fieldSetFlags()[3] = true;
      }
      this.brokerStatisticsBuilder = null;
    }

    /**
      * Gets the value of the 'brokerConfiguration' field.
      * Kafka configuration of this broker.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getBrokerConfiguration() {
      return brokerConfiguration;
    }

    /**
      * Sets the value of the 'brokerConfiguration' field.
      * Kafka configuration of this broker.
      * @param value The value of 'brokerConfiguration'.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerMetricsRecord.Builder setBrokerConfiguration(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[0], value);
      this.brokerConfiguration = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerConfiguration' field has been set.
      * Kafka configuration of this broker.
      * @return True if the 'brokerConfiguration' field has been set, false otherwise.
      */
    public boolean hasBrokerConfiguration() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'brokerConfiguration' field.
      * Kafka configuration of this broker.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerMetricsRecord.Builder clearBrokerConfiguration() {
      brokerConfiguration = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'javaSystemProperties' field.
      * Java system properties of this broker, obtained through System.getProperties().
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getJavaSystemProperties() {
      return javaSystemProperties;
    }

    /**
      * Sets the value of the 'javaSystemProperties' field.
      * Java system properties of this broker, obtained through System.getProperties().
      * @param value The value of 'javaSystemProperties'.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerMetricsRecord.Builder setJavaSystemProperties(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[1], value);
      this.javaSystemProperties = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'javaSystemProperties' field has been set.
      * Java system properties of this broker, obtained through System.getProperties().
      * @return True if the 'javaSystemProperties' field has been set, false otherwise.
      */
    public boolean hasJavaSystemProperties() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'javaSystemProperties' field.
      * Java system properties of this broker, obtained through System.getProperties().
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerMetricsRecord.Builder clearJavaSystemProperties() {
      javaSystemProperties = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'jvmRuntimeEnvironment' field.
      * Runtime environment information of this broker's JVM.
      * @return The value.
      */
    public io.confluent.support.metrics.RuntimePropertiesRecord getJvmRuntimeEnvironment() {
      return jvmRuntimeEnvironment;
    }

    /**
      * Sets the value of the 'jvmRuntimeEnvironment' field.
      * Runtime environment information of this broker's JVM.
      * @param value The value of 'jvmRuntimeEnvironment'.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerMetricsRecord.Builder setJvmRuntimeEnvironment(io.confluent.support.metrics.RuntimePropertiesRecord value) {
      validate(fields()[2], value);
      this.jvmRuntimeEnvironmentBuilder = null;
      this.jvmRuntimeEnvironment = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'jvmRuntimeEnvironment' field has been set.
      * Runtime environment information of this broker's JVM.
      * @return True if the 'jvmRuntimeEnvironment' field has been set, false otherwise.
      */
    public boolean hasJvmRuntimeEnvironment() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'jvmRuntimeEnvironment' field and creates one if it doesn't exist yet.
     * Runtime environment information of this broker's JVM.
     * @return This builder.
     */
    public io.confluent.support.metrics.RuntimePropertiesRecord.Builder getJvmRuntimeEnvironmentBuilder() {
      if (jvmRuntimeEnvironmentBuilder == null) {
        if (hasJvmRuntimeEnvironment()) {
          setJvmRuntimeEnvironmentBuilder(io.confluent.support.metrics.RuntimePropertiesRecord.newBuilder(jvmRuntimeEnvironment));
        } else {
          setJvmRuntimeEnvironmentBuilder(io.confluent.support.metrics.RuntimePropertiesRecord.newBuilder());
        }
      }
      return jvmRuntimeEnvironmentBuilder;
    }

    /**
     * Sets the Builder instance for the 'jvmRuntimeEnvironment' field
     * Runtime environment information of this broker's JVM.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.confluent.support.metrics.BrokerMetricsRecord.Builder setJvmRuntimeEnvironmentBuilder(io.confluent.support.metrics.RuntimePropertiesRecord.Builder value) {
      clearJvmRuntimeEnvironment();
      jvmRuntimeEnvironmentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'jvmRuntimeEnvironment' field has an active Builder instance
     * Runtime environment information of this broker's JVM.
     * @return True if the 'jvmRuntimeEnvironment' field has an active Builder instance
     */
    public boolean hasJvmRuntimeEnvironmentBuilder() {
      return jvmRuntimeEnvironmentBuilder != null;
    }

    /**
      * Clears the value of the 'jvmRuntimeEnvironment' field.
      * Runtime environment information of this broker's JVM.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerMetricsRecord.Builder clearJvmRuntimeEnvironment() {
      jvmRuntimeEnvironment = null;
      jvmRuntimeEnvironmentBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'brokerStatistics' field.
      * Various statistics obtained from a running broker
      * @return The value.
      */
    public io.confluent.support.metrics.BrokerStatisticsRecord getBrokerStatistics() {
      return brokerStatistics;
    }

    /**
      * Sets the value of the 'brokerStatistics' field.
      * Various statistics obtained from a running broker
      * @param value The value of 'brokerStatistics'.
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerMetricsRecord.Builder setBrokerStatistics(io.confluent.support.metrics.BrokerStatisticsRecord value) {
      validate(fields()[3], value);
      this.brokerStatisticsBuilder = null;
      this.brokerStatistics = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerStatistics' field has been set.
      * Various statistics obtained from a running broker
      * @return True if the 'brokerStatistics' field has been set, false otherwise.
      */
    public boolean hasBrokerStatistics() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'brokerStatistics' field and creates one if it doesn't exist yet.
     * Various statistics obtained from a running broker
     * @return This builder.
     */
    public io.confluent.support.metrics.BrokerStatisticsRecord.Builder getBrokerStatisticsBuilder() {
      if (brokerStatisticsBuilder == null) {
        if (hasBrokerStatistics()) {
          setBrokerStatisticsBuilder(io.confluent.support.metrics.BrokerStatisticsRecord.newBuilder(brokerStatistics));
        } else {
          setBrokerStatisticsBuilder(io.confluent.support.metrics.BrokerStatisticsRecord.newBuilder());
        }
      }
      return brokerStatisticsBuilder;
    }

    /**
     * Sets the Builder instance for the 'brokerStatistics' field
     * Various statistics obtained from a running broker
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.confluent.support.metrics.BrokerMetricsRecord.Builder setBrokerStatisticsBuilder(io.confluent.support.metrics.BrokerStatisticsRecord.Builder value) {
      clearBrokerStatistics();
      brokerStatisticsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'brokerStatistics' field has an active Builder instance
     * Various statistics obtained from a running broker
     * @return True if the 'brokerStatistics' field has an active Builder instance
     */
    public boolean hasBrokerStatisticsBuilder() {
      return brokerStatisticsBuilder != null;
    }

    /**
      * Clears the value of the 'brokerStatistics' field.
      * Various statistics obtained from a running broker
      * @return This builder.
      */
    public io.confluent.support.metrics.BrokerMetricsRecord.Builder clearBrokerStatistics() {
      brokerStatistics = null;
      brokerStatisticsBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public BrokerMetricsRecord build() {
      try {
        BrokerMetricsRecord record = new BrokerMetricsRecord();
        record.brokerConfiguration = fieldSetFlags()[0] ? this.brokerConfiguration : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[0]);
        record.javaSystemProperties = fieldSetFlags()[1] ? this.javaSystemProperties : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[1]);
        if (jvmRuntimeEnvironmentBuilder != null) {
          record.jvmRuntimeEnvironment = this.jvmRuntimeEnvironmentBuilder.build();
        } else {
          record.jvmRuntimeEnvironment = fieldSetFlags()[2] ? this.jvmRuntimeEnvironment : (io.confluent.support.metrics.RuntimePropertiesRecord) defaultValue(fields()[2]);
        }
        if (brokerStatisticsBuilder != null) {
          record.brokerStatistics = this.brokerStatisticsBuilder.build();
        } else {
          record.brokerStatistics = fieldSetFlags()[3] ? this.brokerStatistics : (io.confluent.support.metrics.BrokerStatisticsRecord) defaultValue(fields()[3]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
