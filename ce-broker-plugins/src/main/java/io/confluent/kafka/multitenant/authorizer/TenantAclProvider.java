// (Copyright) [2018 - 2019] Confluent, Inc.

package io.confluent.kafka.multitenant.authorizer;

import io.confluent.kafka.multitenant.MultiTenantPrincipal;
import io.confluent.kafka.security.authorizer.acl.AclProvider;
import io.confluent.security.authorizer.Action;
import io.confluent.security.authorizer.provider.ConfluentBuiltInProviders.AccessRuleProviders;
import io.confluent.security.authorizer.provider.AuthorizeRule;
import kafka.security.authorizer.AclEntry;
import org.apache.kafka.common.security.auth.KafkaPrincipal;

import java.util.Set;

/**
 * Multi-tenant authorizer that supports:
 * <ul>
 *    <li>ACLs with TenantUser:clusterId_userId as principal</li>
 *    <li>ACLs with TenantUser*:clusterId_ as wildcard prefixed principal</li>
 *    <li>ACLs with User:* as wildcard principal (e.g. for brokers or users on other listeners)</li>
 *    <li>Resource patterns with literal resource names clusterId_resourceName</li>
 *    <li>Resource patterns with prefixed resource names clusterId_resourcePrefix</li>
 *    <li>Resource patterns with tenant wildcard resource names using prefixed name clusterId_</li>
 *    <li>Resource patterns with literal wildcard resource name "*" (e.g. for broker ACLs)</li>
 *    <li>Super users configured using the configuration option `super.users`
 *        (e.g. for broker principals)</li>
 *    <li>Tenant super users with access to all tenant resources using tenant principals with
 *        {@link io.confluent.kafka.multitenant.TenantMetadata#isSuperUser} enabled.</li>
 * </ul>
 * Use of tenant prefix:
 * <ul>
 *   <li>Clients configure ACLs for User:userId</li>
 *   <li>Multi-tenant interceptor transforms User:userId to TenantUser:clusterId_userId</li>
 *   <li>ACLs are stored internally in ZooKeeper for TenantUser:clusterId_userId</li>
 *   <li>When tenants describe ACLs, prefix is removed from response by the interceptor</li>
 *   <li>Multi-tenant principal builder generates tenant principal TenantUser:clusterId_userId</li>
 *   <li>Authorizer matches TenantUser principals in ACLs obtained from ZooKeeper against
 *       TenantUser session principal generated by the principal builder.</li>
 *   <li>Non-tenant principals (e.g broker principals) are of the form User:userId in ACLs
 *       as well as session principals</li>
 * </ul>
 * Assumptions:
 * <ul>
 *   <li>All tenant ACLs have principals and resource names with tenant prefix</li>
 *   <li>All non-tenant (e.g. broker) ACLs have principals and resource names that do not
 *       contain prefix of any tenant in the cluster</li>
 *   <li>Tenant principals have type TenantUser, others have type User</li>
 * </ul>
 *
 */
public class TenantAclProvider extends AclProvider {

  @Override
  public String providerName() {
    return AccessRuleProviders.MULTI_TENANT.name();
  }

  @Override
  public AuthorizeRule findRule(KafkaPrincipal sessionPrincipal,
                                Set<KafkaPrincipal> groupPrincipals,
                                String host,
                                Action action) {
    if (!groupPrincipals.isEmpty())
      throw new UnsupportedOperationException("Groups are not supported for TenantAclProvider");

    String tenantPrefix = sessionPrincipal instanceof MultiTenantPrincipal
        ? ((MultiTenantPrincipal) sessionPrincipal).tenantMetadata().tenantPrefix() : "";
    KafkaPrincipal wildcardPrincipal = tenantPrefix.isEmpty() ? AclEntry.WildcardPrincipal() :
        new KafkaPrincipal(MultiTenantPrincipal.TENANT_WILDCARD_USER_TYPE, tenantPrefix);

    return super.findRule(sessionPrincipal, groupPrincipals, wildcardPrincipal, null, host, action);
  }

  @Override
  public boolean mayDeny() {
    return true;
  }

  @Override
  public boolean usesMetadataFromThisKafkaCluster() {
    return false;
  }
}
